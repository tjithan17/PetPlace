
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model PetProfile
 * 
 */
export type PetProfile = $Result.DefaultSelection<Prisma.$PetProfilePayload>
/**
 * Model PetPhoto
 * 
 */
export type PetPhoto = $Result.DefaultSelection<Prisma.$PetPhotoPayload>
/**
 * Model ChatRoom
 * 
 */
export type ChatRoom = $Result.DefaultSelection<Prisma.$ChatRoomPayload>
/**
 * Model Messages
 * 
 */
export type Messages = $Result.DefaultSelection<Prisma.$MessagesPayload>
/**
 * Model LocationInfo
 * 
 */
export type LocationInfo = $Result.DefaultSelection<Prisma.$LocationInfoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.petProfile`: Exposes CRUD operations for the **PetProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PetProfiles
    * const petProfiles = await prisma.petProfile.findMany()
    * ```
    */
  get petProfile(): Prisma.PetProfileDelegate<ExtArgs>;

  /**
   * `prisma.petPhoto`: Exposes CRUD operations for the **PetPhoto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PetPhotos
    * const petPhotos = await prisma.petPhoto.findMany()
    * ```
    */
  get petPhoto(): Prisma.PetPhotoDelegate<ExtArgs>;

  /**
   * `prisma.chatRoom`: Exposes CRUD operations for the **ChatRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatRooms
    * const chatRooms = await prisma.chatRoom.findMany()
    * ```
    */
  get chatRoom(): Prisma.ChatRoomDelegate<ExtArgs>;

  /**
   * `prisma.messages`: Exposes CRUD operations for the **Messages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.messages.findMany()
    * ```
    */
  get messages(): Prisma.MessagesDelegate<ExtArgs>;

  /**
   * `prisma.locationInfo`: Exposes CRUD operations for the **LocationInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LocationInfos
    * const locationInfos = await prisma.locationInfo.findMany()
    * ```
    */
  get locationInfo(): Prisma.LocationInfoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    PetProfile: 'PetProfile',
    PetPhoto: 'PetPhoto',
    ChatRoom: 'ChatRoom',
    Messages: 'Messages',
    LocationInfo: 'LocationInfo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'petProfile' | 'petPhoto' | 'chatRoom' | 'messages' | 'locationInfo'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      PetProfile: {
        payload: Prisma.$PetProfilePayload<ExtArgs>
        fields: Prisma.PetProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PetProfileFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PetProfileFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetProfilePayload>
          }
          findFirst: {
            args: Prisma.PetProfileFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PetProfileFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetProfilePayload>
          }
          findMany: {
            args: Prisma.PetProfileFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetProfilePayload>[]
          }
          create: {
            args: Prisma.PetProfileCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetProfilePayload>
          }
          createMany: {
            args: Prisma.PetProfileCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PetProfileDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetProfilePayload>
          }
          update: {
            args: Prisma.PetProfileUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetProfilePayload>
          }
          deleteMany: {
            args: Prisma.PetProfileDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PetProfileUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PetProfileUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetProfilePayload>
          }
          aggregate: {
            args: Prisma.PetProfileAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePetProfile>
          }
          groupBy: {
            args: Prisma.PetProfileGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PetProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.PetProfileCountArgs<ExtArgs>,
            result: $Utils.Optional<PetProfileCountAggregateOutputType> | number
          }
        }
      }
      PetPhoto: {
        payload: Prisma.$PetPhotoPayload<ExtArgs>
        fields: Prisma.PetPhotoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PetPhotoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPhotoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PetPhotoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPhotoPayload>
          }
          findFirst: {
            args: Prisma.PetPhotoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPhotoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PetPhotoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPhotoPayload>
          }
          findMany: {
            args: Prisma.PetPhotoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPhotoPayload>[]
          }
          create: {
            args: Prisma.PetPhotoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPhotoPayload>
          }
          createMany: {
            args: Prisma.PetPhotoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PetPhotoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPhotoPayload>
          }
          update: {
            args: Prisma.PetPhotoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPhotoPayload>
          }
          deleteMany: {
            args: Prisma.PetPhotoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PetPhotoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PetPhotoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPhotoPayload>
          }
          aggregate: {
            args: Prisma.PetPhotoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePetPhoto>
          }
          groupBy: {
            args: Prisma.PetPhotoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PetPhotoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PetPhotoCountArgs<ExtArgs>,
            result: $Utils.Optional<PetPhotoCountAggregateOutputType> | number
          }
        }
      }
      ChatRoom: {
        payload: Prisma.$ChatRoomPayload<ExtArgs>
        fields: Prisma.ChatRoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatRoomFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatRoomFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          findFirst: {
            args: Prisma.ChatRoomFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatRoomFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          findMany: {
            args: Prisma.ChatRoomFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>[]
          }
          create: {
            args: Prisma.ChatRoomCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          createMany: {
            args: Prisma.ChatRoomCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChatRoomDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          update: {
            args: Prisma.ChatRoomUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          deleteMany: {
            args: Prisma.ChatRoomDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChatRoomUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChatRoomUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          aggregate: {
            args: Prisma.ChatRoomAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChatRoom>
          }
          groupBy: {
            args: Prisma.ChatRoomGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChatRoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatRoomCountArgs<ExtArgs>,
            result: $Utils.Optional<ChatRoomCountAggregateOutputType> | number
          }
        }
      }
      Messages: {
        payload: Prisma.$MessagesPayload<ExtArgs>
        fields: Prisma.MessagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          findFirst: {
            args: Prisma.MessagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          findMany: {
            args: Prisma.MessagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>[]
          }
          create: {
            args: Prisma.MessagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          createMany: {
            args: Prisma.MessagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MessagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          update: {
            args: Prisma.MessagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          deleteMany: {
            args: Prisma.MessagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          aggregate: {
            args: Prisma.MessagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessages>
          }
          groupBy: {
            args: Prisma.MessagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessagesCountArgs<ExtArgs>,
            result: $Utils.Optional<MessagesCountAggregateOutputType> | number
          }
        }
      }
      LocationInfo: {
        payload: Prisma.$LocationInfoPayload<ExtArgs>
        fields: Prisma.LocationInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationInfoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationInfoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationInfoPayload>
          }
          findFirst: {
            args: Prisma.LocationInfoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationInfoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationInfoPayload>
          }
          findMany: {
            args: Prisma.LocationInfoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationInfoPayload>[]
          }
          create: {
            args: Prisma.LocationInfoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationInfoPayload>
          }
          createMany: {
            args: Prisma.LocationInfoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LocationInfoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationInfoPayload>
          }
          update: {
            args: Prisma.LocationInfoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationInfoPayload>
          }
          deleteMany: {
            args: Prisma.LocationInfoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LocationInfoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LocationInfoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationInfoPayload>
          }
          aggregate: {
            args: Prisma.LocationInfoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLocationInfo>
          }
          groupBy: {
            args: Prisma.LocationInfoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LocationInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationInfoCountArgs<ExtArgs>,
            result: $Utils.Optional<LocationInfoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PetProfileCountOutputType
   */

  export type PetProfileCountOutputType = {
    petPhotos: number
  }

  export type PetProfileCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    petPhotos?: boolean | PetProfileCountOutputTypeCountPetPhotosArgs
  }

  // Custom InputTypes

  /**
   * PetProfileCountOutputType without action
   */
  export type PetProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetProfileCountOutputType
     */
    select?: PetProfileCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PetProfileCountOutputType without action
   */
  export type PetProfileCountOutputTypeCountPetPhotosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PetPhotoWhereInput
  }



  /**
   * Count Type ChatRoomCountOutputType
   */

  export type ChatRoomCountOutputType = {
    messages: number
  }

  export type ChatRoomCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatRoomCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes

  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomCountOutputType
     */
    select?: ChatRoomCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessagesWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    username: string | null
    email: string | null
    password: string | null
    userImage: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    username: string | null
    email: string | null
    password: string | null
    userImage: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    username: number
    email: number
    password: number
    userImage: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
    userImage?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
    userImage?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
    userImage?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    username: string
    email: string
    password: string
    userImage: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    userImage?: boolean
    petprofile?: boolean | User$petprofileArgs<ExtArgs>
    locationinfo?: boolean | User$locationinfoArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    userImage?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    petprofile?: boolean | User$petprofileArgs<ExtArgs>
    locationinfo?: boolean | User$locationinfoArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      petprofile: Prisma.$PetProfilePayload<ExtArgs> | null
      locationinfo: Prisma.$LocationInfoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: number
      name: string
      username: string
      email: string
      password: string
      userImage: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    petprofile<T extends User$petprofileArgs<ExtArgs> = {}>(args?: Subset<T, User$petprofileArgs<ExtArgs>>): Prisma__PetProfileClient<$Result.GetResult<Prisma.$PetProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    locationinfo<T extends User$locationinfoArgs<ExtArgs> = {}>(args?: Subset<T, User$locationinfoArgs<ExtArgs>>): Prisma__LocationInfoClient<$Result.GetResult<Prisma.$LocationInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly userImage: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.petprofile
   */
  export type User$petprofileArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetProfile
     */
    select?: PetProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetProfileInclude<ExtArgs> | null
    where?: PetProfileWhereInput
  }


  /**
   * User.locationinfo
   */
  export type User$locationinfoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationInfo
     */
    select?: LocationInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInfoInclude<ExtArgs> | null
    where?: LocationInfoWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model PetProfile
   */

  export type AggregatePetProfile = {
    _count: PetProfileCountAggregateOutputType | null
    _avg: PetProfileAvgAggregateOutputType | null
    _sum: PetProfileSumAggregateOutputType | null
    _min: PetProfileMinAggregateOutputType | null
    _max: PetProfileMaxAggregateOutputType | null
  }

  export type PetProfileAvgAggregateOutputType = {
    petId: number | null
    age: number | null
    userId: number | null
  }

  export type PetProfileSumAggregateOutputType = {
    petId: number | null
    age: number | null
    userId: number | null
  }

  export type PetProfileMinAggregateOutputType = {
    petId: number | null
    petName: string | null
    species: string | null
    breed: string | null
    age: number | null
    vaxxed: string | null
    sprayedNeutered: string | null
    bio: string | null
    profileImage: string | null
    location: string | null
    userId: number | null
  }

  export type PetProfileMaxAggregateOutputType = {
    petId: number | null
    petName: string | null
    species: string | null
    breed: string | null
    age: number | null
    vaxxed: string | null
    sprayedNeutered: string | null
    bio: string | null
    profileImage: string | null
    location: string | null
    userId: number | null
  }

  export type PetProfileCountAggregateOutputType = {
    petId: number
    petName: number
    species: number
    breed: number
    age: number
    vaxxed: number
    sprayedNeutered: number
    bio: number
    profileImage: number
    location: number
    userId: number
    _all: number
  }


  export type PetProfileAvgAggregateInputType = {
    petId?: true
    age?: true
    userId?: true
  }

  export type PetProfileSumAggregateInputType = {
    petId?: true
    age?: true
    userId?: true
  }

  export type PetProfileMinAggregateInputType = {
    petId?: true
    petName?: true
    species?: true
    breed?: true
    age?: true
    vaxxed?: true
    sprayedNeutered?: true
    bio?: true
    profileImage?: true
    location?: true
    userId?: true
  }

  export type PetProfileMaxAggregateInputType = {
    petId?: true
    petName?: true
    species?: true
    breed?: true
    age?: true
    vaxxed?: true
    sprayedNeutered?: true
    bio?: true
    profileImage?: true
    location?: true
    userId?: true
  }

  export type PetProfileCountAggregateInputType = {
    petId?: true
    petName?: true
    species?: true
    breed?: true
    age?: true
    vaxxed?: true
    sprayedNeutered?: true
    bio?: true
    profileImage?: true
    location?: true
    userId?: true
    _all?: true
  }

  export type PetProfileAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PetProfile to aggregate.
     */
    where?: PetProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetProfiles to fetch.
     */
    orderBy?: PetProfileOrderByWithRelationInput | PetProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PetProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PetProfiles
    **/
    _count?: true | PetProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PetProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PetProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PetProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PetProfileMaxAggregateInputType
  }

  export type GetPetProfileAggregateType<T extends PetProfileAggregateArgs> = {
        [P in keyof T & keyof AggregatePetProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePetProfile[P]>
      : GetScalarType<T[P], AggregatePetProfile[P]>
  }




  export type PetProfileGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PetProfileWhereInput
    orderBy?: PetProfileOrderByWithAggregationInput | PetProfileOrderByWithAggregationInput[]
    by: PetProfileScalarFieldEnum[] | PetProfileScalarFieldEnum
    having?: PetProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PetProfileCountAggregateInputType | true
    _avg?: PetProfileAvgAggregateInputType
    _sum?: PetProfileSumAggregateInputType
    _min?: PetProfileMinAggregateInputType
    _max?: PetProfileMaxAggregateInputType
  }

  export type PetProfileGroupByOutputType = {
    petId: number
    petName: string
    species: string
    breed: string
    age: number
    vaxxed: string
    sprayedNeutered: string
    bio: string
    profileImage: string
    location: string
    userId: number
    _count: PetProfileCountAggregateOutputType | null
    _avg: PetProfileAvgAggregateOutputType | null
    _sum: PetProfileSumAggregateOutputType | null
    _min: PetProfileMinAggregateOutputType | null
    _max: PetProfileMaxAggregateOutputType | null
  }

  type GetPetProfileGroupByPayload<T extends PetProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PetProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PetProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PetProfileGroupByOutputType[P]>
            : GetScalarType<T[P], PetProfileGroupByOutputType[P]>
        }
      >
    >


  export type PetProfileSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    petId?: boolean
    petName?: boolean
    species?: boolean
    breed?: boolean
    age?: boolean
    vaxxed?: boolean
    sprayedNeutered?: boolean
    bio?: boolean
    profileImage?: boolean
    location?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    petPhotos?: boolean | PetProfile$petPhotosArgs<ExtArgs>
    _count?: boolean | PetProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["petProfile"]>

  export type PetProfileSelectScalar = {
    petId?: boolean
    petName?: boolean
    species?: boolean
    breed?: boolean
    age?: boolean
    vaxxed?: boolean
    sprayedNeutered?: boolean
    bio?: boolean
    profileImage?: boolean
    location?: boolean
    userId?: boolean
  }

  export type PetProfileInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    petPhotos?: boolean | PetProfile$petPhotosArgs<ExtArgs>
    _count?: boolean | PetProfileCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PetProfilePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "PetProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      petPhotos: Prisma.$PetPhotoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      petId: number
      petName: string
      species: string
      breed: string
      age: number
      vaxxed: string
      sprayedNeutered: string
      bio: string
      profileImage: string
      location: string
      userId: number
    }, ExtArgs["result"]["petProfile"]>
    composites: {}
  }


  type PetProfileGetPayload<S extends boolean | null | undefined | PetProfileDefaultArgs> = $Result.GetResult<Prisma.$PetProfilePayload, S>

  type PetProfileCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PetProfileFindManyArgs, 'select' | 'include'> & {
      select?: PetProfileCountAggregateInputType | true
    }

  export interface PetProfileDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PetProfile'], meta: { name: 'PetProfile' } }
    /**
     * Find zero or one PetProfile that matches the filter.
     * @param {PetProfileFindUniqueArgs} args - Arguments to find a PetProfile
     * @example
     * // Get one PetProfile
     * const petProfile = await prisma.petProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PetProfileFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PetProfileFindUniqueArgs<ExtArgs>>
    ): Prisma__PetProfileClient<$Result.GetResult<Prisma.$PetProfilePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PetProfile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PetProfileFindUniqueOrThrowArgs} args - Arguments to find a PetProfile
     * @example
     * // Get one PetProfile
     * const petProfile = await prisma.petProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PetProfileFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PetProfileFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PetProfileClient<$Result.GetResult<Prisma.$PetProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PetProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetProfileFindFirstArgs} args - Arguments to find a PetProfile
     * @example
     * // Get one PetProfile
     * const petProfile = await prisma.petProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PetProfileFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PetProfileFindFirstArgs<ExtArgs>>
    ): Prisma__PetProfileClient<$Result.GetResult<Prisma.$PetProfilePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PetProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetProfileFindFirstOrThrowArgs} args - Arguments to find a PetProfile
     * @example
     * // Get one PetProfile
     * const petProfile = await prisma.petProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PetProfileFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PetProfileFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PetProfileClient<$Result.GetResult<Prisma.$PetProfilePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PetProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PetProfiles
     * const petProfiles = await prisma.petProfile.findMany()
     * 
     * // Get first 10 PetProfiles
     * const petProfiles = await prisma.petProfile.findMany({ take: 10 })
     * 
     * // Only select the `petId`
     * const petProfileWithPetIdOnly = await prisma.petProfile.findMany({ select: { petId: true } })
     * 
    **/
    findMany<T extends PetProfileFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetProfileFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PetProfilePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PetProfile.
     * @param {PetProfileCreateArgs} args - Arguments to create a PetProfile.
     * @example
     * // Create one PetProfile
     * const PetProfile = await prisma.petProfile.create({
     *   data: {
     *     // ... data to create a PetProfile
     *   }
     * })
     * 
    **/
    create<T extends PetProfileCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PetProfileCreateArgs<ExtArgs>>
    ): Prisma__PetProfileClient<$Result.GetResult<Prisma.$PetProfilePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PetProfiles.
     *     @param {PetProfileCreateManyArgs} args - Arguments to create many PetProfiles.
     *     @example
     *     // Create many PetProfiles
     *     const petProfile = await prisma.petProfile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PetProfileCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetProfileCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PetProfile.
     * @param {PetProfileDeleteArgs} args - Arguments to delete one PetProfile.
     * @example
     * // Delete one PetProfile
     * const PetProfile = await prisma.petProfile.delete({
     *   where: {
     *     // ... filter to delete one PetProfile
     *   }
     * })
     * 
    **/
    delete<T extends PetProfileDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PetProfileDeleteArgs<ExtArgs>>
    ): Prisma__PetProfileClient<$Result.GetResult<Prisma.$PetProfilePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PetProfile.
     * @param {PetProfileUpdateArgs} args - Arguments to update one PetProfile.
     * @example
     * // Update one PetProfile
     * const petProfile = await prisma.petProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PetProfileUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PetProfileUpdateArgs<ExtArgs>>
    ): Prisma__PetProfileClient<$Result.GetResult<Prisma.$PetProfilePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PetProfiles.
     * @param {PetProfileDeleteManyArgs} args - Arguments to filter PetProfiles to delete.
     * @example
     * // Delete a few PetProfiles
     * const { count } = await prisma.petProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PetProfileDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetProfileDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PetProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PetProfiles
     * const petProfile = await prisma.petProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PetProfileUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PetProfileUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PetProfile.
     * @param {PetProfileUpsertArgs} args - Arguments to update or create a PetProfile.
     * @example
     * // Update or create a PetProfile
     * const petProfile = await prisma.petProfile.upsert({
     *   create: {
     *     // ... data to create a PetProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PetProfile we want to update
     *   }
     * })
    **/
    upsert<T extends PetProfileUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PetProfileUpsertArgs<ExtArgs>>
    ): Prisma__PetProfileClient<$Result.GetResult<Prisma.$PetProfilePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PetProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetProfileCountArgs} args - Arguments to filter PetProfiles to count.
     * @example
     * // Count the number of PetProfiles
     * const count = await prisma.petProfile.count({
     *   where: {
     *     // ... the filter for the PetProfiles we want to count
     *   }
     * })
    **/
    count<T extends PetProfileCountArgs>(
      args?: Subset<T, PetProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PetProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PetProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PetProfileAggregateArgs>(args: Subset<T, PetProfileAggregateArgs>): Prisma.PrismaPromise<GetPetProfileAggregateType<T>>

    /**
     * Group by PetProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PetProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PetProfileGroupByArgs['orderBy'] }
        : { orderBy?: PetProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PetProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PetProfile model
   */
  readonly fields: PetProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PetProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PetProfileClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    petPhotos<T extends PetProfile$petPhotosArgs<ExtArgs> = {}>(args?: Subset<T, PetProfile$petPhotosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PetPhotoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PetProfile model
   */ 
  interface PetProfileFieldRefs {
    readonly petId: FieldRef<"PetProfile", 'Int'>
    readonly petName: FieldRef<"PetProfile", 'String'>
    readonly species: FieldRef<"PetProfile", 'String'>
    readonly breed: FieldRef<"PetProfile", 'String'>
    readonly age: FieldRef<"PetProfile", 'Int'>
    readonly vaxxed: FieldRef<"PetProfile", 'String'>
    readonly sprayedNeutered: FieldRef<"PetProfile", 'String'>
    readonly bio: FieldRef<"PetProfile", 'String'>
    readonly profileImage: FieldRef<"PetProfile", 'String'>
    readonly location: FieldRef<"PetProfile", 'String'>
    readonly userId: FieldRef<"PetProfile", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * PetProfile findUnique
   */
  export type PetProfileFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetProfile
     */
    select?: PetProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetProfileInclude<ExtArgs> | null
    /**
     * Filter, which PetProfile to fetch.
     */
    where: PetProfileWhereUniqueInput
  }


  /**
   * PetProfile findUniqueOrThrow
   */
  export type PetProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetProfile
     */
    select?: PetProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetProfileInclude<ExtArgs> | null
    /**
     * Filter, which PetProfile to fetch.
     */
    where: PetProfileWhereUniqueInput
  }


  /**
   * PetProfile findFirst
   */
  export type PetProfileFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetProfile
     */
    select?: PetProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetProfileInclude<ExtArgs> | null
    /**
     * Filter, which PetProfile to fetch.
     */
    where?: PetProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetProfiles to fetch.
     */
    orderBy?: PetProfileOrderByWithRelationInput | PetProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PetProfiles.
     */
    cursor?: PetProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PetProfiles.
     */
    distinct?: PetProfileScalarFieldEnum | PetProfileScalarFieldEnum[]
  }


  /**
   * PetProfile findFirstOrThrow
   */
  export type PetProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetProfile
     */
    select?: PetProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetProfileInclude<ExtArgs> | null
    /**
     * Filter, which PetProfile to fetch.
     */
    where?: PetProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetProfiles to fetch.
     */
    orderBy?: PetProfileOrderByWithRelationInput | PetProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PetProfiles.
     */
    cursor?: PetProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PetProfiles.
     */
    distinct?: PetProfileScalarFieldEnum | PetProfileScalarFieldEnum[]
  }


  /**
   * PetProfile findMany
   */
  export type PetProfileFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetProfile
     */
    select?: PetProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetProfileInclude<ExtArgs> | null
    /**
     * Filter, which PetProfiles to fetch.
     */
    where?: PetProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetProfiles to fetch.
     */
    orderBy?: PetProfileOrderByWithRelationInput | PetProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PetProfiles.
     */
    cursor?: PetProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetProfiles.
     */
    skip?: number
    distinct?: PetProfileScalarFieldEnum | PetProfileScalarFieldEnum[]
  }


  /**
   * PetProfile create
   */
  export type PetProfileCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetProfile
     */
    select?: PetProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a PetProfile.
     */
    data: XOR<PetProfileCreateInput, PetProfileUncheckedCreateInput>
  }


  /**
   * PetProfile createMany
   */
  export type PetProfileCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PetProfiles.
     */
    data: PetProfileCreateManyInput | PetProfileCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PetProfile update
   */
  export type PetProfileUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetProfile
     */
    select?: PetProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a PetProfile.
     */
    data: XOR<PetProfileUpdateInput, PetProfileUncheckedUpdateInput>
    /**
     * Choose, which PetProfile to update.
     */
    where: PetProfileWhereUniqueInput
  }


  /**
   * PetProfile updateMany
   */
  export type PetProfileUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PetProfiles.
     */
    data: XOR<PetProfileUpdateManyMutationInput, PetProfileUncheckedUpdateManyInput>
    /**
     * Filter which PetProfiles to update
     */
    where?: PetProfileWhereInput
  }


  /**
   * PetProfile upsert
   */
  export type PetProfileUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetProfile
     */
    select?: PetProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the PetProfile to update in case it exists.
     */
    where: PetProfileWhereUniqueInput
    /**
     * In case the PetProfile found by the `where` argument doesn't exist, create a new PetProfile with this data.
     */
    create: XOR<PetProfileCreateInput, PetProfileUncheckedCreateInput>
    /**
     * In case the PetProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PetProfileUpdateInput, PetProfileUncheckedUpdateInput>
  }


  /**
   * PetProfile delete
   */
  export type PetProfileDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetProfile
     */
    select?: PetProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetProfileInclude<ExtArgs> | null
    /**
     * Filter which PetProfile to delete.
     */
    where: PetProfileWhereUniqueInput
  }


  /**
   * PetProfile deleteMany
   */
  export type PetProfileDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PetProfiles to delete
     */
    where?: PetProfileWhereInput
  }


  /**
   * PetProfile.petPhotos
   */
  export type PetProfile$petPhotosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetPhoto
     */
    select?: PetPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetPhotoInclude<ExtArgs> | null
    where?: PetPhotoWhereInput
    orderBy?: PetPhotoOrderByWithRelationInput | PetPhotoOrderByWithRelationInput[]
    cursor?: PetPhotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PetPhotoScalarFieldEnum | PetPhotoScalarFieldEnum[]
  }


  /**
   * PetProfile without action
   */
  export type PetProfileDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetProfile
     */
    select?: PetProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetProfileInclude<ExtArgs> | null
  }



  /**
   * Model PetPhoto
   */

  export type AggregatePetPhoto = {
    _count: PetPhotoCountAggregateOutputType | null
    _avg: PetPhotoAvgAggregateOutputType | null
    _sum: PetPhotoSumAggregateOutputType | null
    _min: PetPhotoMinAggregateOutputType | null
    _max: PetPhotoMaxAggregateOutputType | null
  }

  export type PetPhotoAvgAggregateOutputType = {
    photoId: number | null
    petProfileId: number | null
  }

  export type PetPhotoSumAggregateOutputType = {
    photoId: number | null
    petProfileId: number | null
  }

  export type PetPhotoMinAggregateOutputType = {
    photoId: number | null
    imageUrl: string | null
    petProfileId: number | null
    location: string | null
  }

  export type PetPhotoMaxAggregateOutputType = {
    photoId: number | null
    imageUrl: string | null
    petProfileId: number | null
    location: string | null
  }

  export type PetPhotoCountAggregateOutputType = {
    photoId: number
    imageUrl: number
    petProfileId: number
    location: number
    _all: number
  }


  export type PetPhotoAvgAggregateInputType = {
    photoId?: true
    petProfileId?: true
  }

  export type PetPhotoSumAggregateInputType = {
    photoId?: true
    petProfileId?: true
  }

  export type PetPhotoMinAggregateInputType = {
    photoId?: true
    imageUrl?: true
    petProfileId?: true
    location?: true
  }

  export type PetPhotoMaxAggregateInputType = {
    photoId?: true
    imageUrl?: true
    petProfileId?: true
    location?: true
  }

  export type PetPhotoCountAggregateInputType = {
    photoId?: true
    imageUrl?: true
    petProfileId?: true
    location?: true
    _all?: true
  }

  export type PetPhotoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PetPhoto to aggregate.
     */
    where?: PetPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetPhotos to fetch.
     */
    orderBy?: PetPhotoOrderByWithRelationInput | PetPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PetPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetPhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PetPhotos
    **/
    _count?: true | PetPhotoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PetPhotoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PetPhotoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PetPhotoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PetPhotoMaxAggregateInputType
  }

  export type GetPetPhotoAggregateType<T extends PetPhotoAggregateArgs> = {
        [P in keyof T & keyof AggregatePetPhoto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePetPhoto[P]>
      : GetScalarType<T[P], AggregatePetPhoto[P]>
  }




  export type PetPhotoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PetPhotoWhereInput
    orderBy?: PetPhotoOrderByWithAggregationInput | PetPhotoOrderByWithAggregationInput[]
    by: PetPhotoScalarFieldEnum[] | PetPhotoScalarFieldEnum
    having?: PetPhotoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PetPhotoCountAggregateInputType | true
    _avg?: PetPhotoAvgAggregateInputType
    _sum?: PetPhotoSumAggregateInputType
    _min?: PetPhotoMinAggregateInputType
    _max?: PetPhotoMaxAggregateInputType
  }

  export type PetPhotoGroupByOutputType = {
    photoId: number
    imageUrl: string
    petProfileId: number
    location: string
    _count: PetPhotoCountAggregateOutputType | null
    _avg: PetPhotoAvgAggregateOutputType | null
    _sum: PetPhotoSumAggregateOutputType | null
    _min: PetPhotoMinAggregateOutputType | null
    _max: PetPhotoMaxAggregateOutputType | null
  }

  type GetPetPhotoGroupByPayload<T extends PetPhotoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PetPhotoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PetPhotoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PetPhotoGroupByOutputType[P]>
            : GetScalarType<T[P], PetPhotoGroupByOutputType[P]>
        }
      >
    >


  export type PetPhotoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    photoId?: boolean
    imageUrl?: boolean
    petProfileId?: boolean
    location?: boolean
    petProfile?: boolean | PetProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["petPhoto"]>

  export type PetPhotoSelectScalar = {
    photoId?: boolean
    imageUrl?: boolean
    petProfileId?: boolean
    location?: boolean
  }

  export type PetPhotoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    petProfile?: boolean | PetProfileDefaultArgs<ExtArgs>
  }


  export type $PetPhotoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "PetPhoto"
    objects: {
      petProfile: Prisma.$PetProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      photoId: number
      imageUrl: string
      petProfileId: number
      location: string
    }, ExtArgs["result"]["petPhoto"]>
    composites: {}
  }


  type PetPhotoGetPayload<S extends boolean | null | undefined | PetPhotoDefaultArgs> = $Result.GetResult<Prisma.$PetPhotoPayload, S>

  type PetPhotoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PetPhotoFindManyArgs, 'select' | 'include'> & {
      select?: PetPhotoCountAggregateInputType | true
    }

  export interface PetPhotoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PetPhoto'], meta: { name: 'PetPhoto' } }
    /**
     * Find zero or one PetPhoto that matches the filter.
     * @param {PetPhotoFindUniqueArgs} args - Arguments to find a PetPhoto
     * @example
     * // Get one PetPhoto
     * const petPhoto = await prisma.petPhoto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PetPhotoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PetPhotoFindUniqueArgs<ExtArgs>>
    ): Prisma__PetPhotoClient<$Result.GetResult<Prisma.$PetPhotoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PetPhoto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PetPhotoFindUniqueOrThrowArgs} args - Arguments to find a PetPhoto
     * @example
     * // Get one PetPhoto
     * const petPhoto = await prisma.petPhoto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PetPhotoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PetPhotoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PetPhotoClient<$Result.GetResult<Prisma.$PetPhotoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PetPhoto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetPhotoFindFirstArgs} args - Arguments to find a PetPhoto
     * @example
     * // Get one PetPhoto
     * const petPhoto = await prisma.petPhoto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PetPhotoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PetPhotoFindFirstArgs<ExtArgs>>
    ): Prisma__PetPhotoClient<$Result.GetResult<Prisma.$PetPhotoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PetPhoto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetPhotoFindFirstOrThrowArgs} args - Arguments to find a PetPhoto
     * @example
     * // Get one PetPhoto
     * const petPhoto = await prisma.petPhoto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PetPhotoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PetPhotoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PetPhotoClient<$Result.GetResult<Prisma.$PetPhotoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PetPhotos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetPhotoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PetPhotos
     * const petPhotos = await prisma.petPhoto.findMany()
     * 
     * // Get first 10 PetPhotos
     * const petPhotos = await prisma.petPhoto.findMany({ take: 10 })
     * 
     * // Only select the `photoId`
     * const petPhotoWithPhotoIdOnly = await prisma.petPhoto.findMany({ select: { photoId: true } })
     * 
    **/
    findMany<T extends PetPhotoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetPhotoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PetPhotoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PetPhoto.
     * @param {PetPhotoCreateArgs} args - Arguments to create a PetPhoto.
     * @example
     * // Create one PetPhoto
     * const PetPhoto = await prisma.petPhoto.create({
     *   data: {
     *     // ... data to create a PetPhoto
     *   }
     * })
     * 
    **/
    create<T extends PetPhotoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PetPhotoCreateArgs<ExtArgs>>
    ): Prisma__PetPhotoClient<$Result.GetResult<Prisma.$PetPhotoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PetPhotos.
     *     @param {PetPhotoCreateManyArgs} args - Arguments to create many PetPhotos.
     *     @example
     *     // Create many PetPhotos
     *     const petPhoto = await prisma.petPhoto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PetPhotoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetPhotoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PetPhoto.
     * @param {PetPhotoDeleteArgs} args - Arguments to delete one PetPhoto.
     * @example
     * // Delete one PetPhoto
     * const PetPhoto = await prisma.petPhoto.delete({
     *   where: {
     *     // ... filter to delete one PetPhoto
     *   }
     * })
     * 
    **/
    delete<T extends PetPhotoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PetPhotoDeleteArgs<ExtArgs>>
    ): Prisma__PetPhotoClient<$Result.GetResult<Prisma.$PetPhotoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PetPhoto.
     * @param {PetPhotoUpdateArgs} args - Arguments to update one PetPhoto.
     * @example
     * // Update one PetPhoto
     * const petPhoto = await prisma.petPhoto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PetPhotoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PetPhotoUpdateArgs<ExtArgs>>
    ): Prisma__PetPhotoClient<$Result.GetResult<Prisma.$PetPhotoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PetPhotos.
     * @param {PetPhotoDeleteManyArgs} args - Arguments to filter PetPhotos to delete.
     * @example
     * // Delete a few PetPhotos
     * const { count } = await prisma.petPhoto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PetPhotoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetPhotoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PetPhotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetPhotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PetPhotos
     * const petPhoto = await prisma.petPhoto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PetPhotoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PetPhotoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PetPhoto.
     * @param {PetPhotoUpsertArgs} args - Arguments to update or create a PetPhoto.
     * @example
     * // Update or create a PetPhoto
     * const petPhoto = await prisma.petPhoto.upsert({
     *   create: {
     *     // ... data to create a PetPhoto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PetPhoto we want to update
     *   }
     * })
    **/
    upsert<T extends PetPhotoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PetPhotoUpsertArgs<ExtArgs>>
    ): Prisma__PetPhotoClient<$Result.GetResult<Prisma.$PetPhotoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PetPhotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetPhotoCountArgs} args - Arguments to filter PetPhotos to count.
     * @example
     * // Count the number of PetPhotos
     * const count = await prisma.petPhoto.count({
     *   where: {
     *     // ... the filter for the PetPhotos we want to count
     *   }
     * })
    **/
    count<T extends PetPhotoCountArgs>(
      args?: Subset<T, PetPhotoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PetPhotoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PetPhoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetPhotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PetPhotoAggregateArgs>(args: Subset<T, PetPhotoAggregateArgs>): Prisma.PrismaPromise<GetPetPhotoAggregateType<T>>

    /**
     * Group by PetPhoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetPhotoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PetPhotoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PetPhotoGroupByArgs['orderBy'] }
        : { orderBy?: PetPhotoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PetPhotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPetPhotoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PetPhoto model
   */
  readonly fields: PetPhotoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PetPhoto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PetPhotoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    petProfile<T extends PetProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PetProfileDefaultArgs<ExtArgs>>): Prisma__PetProfileClient<$Result.GetResult<Prisma.$PetProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PetPhoto model
   */ 
  interface PetPhotoFieldRefs {
    readonly photoId: FieldRef<"PetPhoto", 'Int'>
    readonly imageUrl: FieldRef<"PetPhoto", 'String'>
    readonly petProfileId: FieldRef<"PetPhoto", 'Int'>
    readonly location: FieldRef<"PetPhoto", 'String'>
  }
    

  // Custom InputTypes

  /**
   * PetPhoto findUnique
   */
  export type PetPhotoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetPhoto
     */
    select?: PetPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetPhotoInclude<ExtArgs> | null
    /**
     * Filter, which PetPhoto to fetch.
     */
    where: PetPhotoWhereUniqueInput
  }


  /**
   * PetPhoto findUniqueOrThrow
   */
  export type PetPhotoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetPhoto
     */
    select?: PetPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetPhotoInclude<ExtArgs> | null
    /**
     * Filter, which PetPhoto to fetch.
     */
    where: PetPhotoWhereUniqueInput
  }


  /**
   * PetPhoto findFirst
   */
  export type PetPhotoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetPhoto
     */
    select?: PetPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetPhotoInclude<ExtArgs> | null
    /**
     * Filter, which PetPhoto to fetch.
     */
    where?: PetPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetPhotos to fetch.
     */
    orderBy?: PetPhotoOrderByWithRelationInput | PetPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PetPhotos.
     */
    cursor?: PetPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetPhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PetPhotos.
     */
    distinct?: PetPhotoScalarFieldEnum | PetPhotoScalarFieldEnum[]
  }


  /**
   * PetPhoto findFirstOrThrow
   */
  export type PetPhotoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetPhoto
     */
    select?: PetPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetPhotoInclude<ExtArgs> | null
    /**
     * Filter, which PetPhoto to fetch.
     */
    where?: PetPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetPhotos to fetch.
     */
    orderBy?: PetPhotoOrderByWithRelationInput | PetPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PetPhotos.
     */
    cursor?: PetPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetPhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PetPhotos.
     */
    distinct?: PetPhotoScalarFieldEnum | PetPhotoScalarFieldEnum[]
  }


  /**
   * PetPhoto findMany
   */
  export type PetPhotoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetPhoto
     */
    select?: PetPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetPhotoInclude<ExtArgs> | null
    /**
     * Filter, which PetPhotos to fetch.
     */
    where?: PetPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetPhotos to fetch.
     */
    orderBy?: PetPhotoOrderByWithRelationInput | PetPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PetPhotos.
     */
    cursor?: PetPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetPhotos.
     */
    skip?: number
    distinct?: PetPhotoScalarFieldEnum | PetPhotoScalarFieldEnum[]
  }


  /**
   * PetPhoto create
   */
  export type PetPhotoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetPhoto
     */
    select?: PetPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetPhotoInclude<ExtArgs> | null
    /**
     * The data needed to create a PetPhoto.
     */
    data: XOR<PetPhotoCreateInput, PetPhotoUncheckedCreateInput>
  }


  /**
   * PetPhoto createMany
   */
  export type PetPhotoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PetPhotos.
     */
    data: PetPhotoCreateManyInput | PetPhotoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PetPhoto update
   */
  export type PetPhotoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetPhoto
     */
    select?: PetPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetPhotoInclude<ExtArgs> | null
    /**
     * The data needed to update a PetPhoto.
     */
    data: XOR<PetPhotoUpdateInput, PetPhotoUncheckedUpdateInput>
    /**
     * Choose, which PetPhoto to update.
     */
    where: PetPhotoWhereUniqueInput
  }


  /**
   * PetPhoto updateMany
   */
  export type PetPhotoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PetPhotos.
     */
    data: XOR<PetPhotoUpdateManyMutationInput, PetPhotoUncheckedUpdateManyInput>
    /**
     * Filter which PetPhotos to update
     */
    where?: PetPhotoWhereInput
  }


  /**
   * PetPhoto upsert
   */
  export type PetPhotoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetPhoto
     */
    select?: PetPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetPhotoInclude<ExtArgs> | null
    /**
     * The filter to search for the PetPhoto to update in case it exists.
     */
    where: PetPhotoWhereUniqueInput
    /**
     * In case the PetPhoto found by the `where` argument doesn't exist, create a new PetPhoto with this data.
     */
    create: XOR<PetPhotoCreateInput, PetPhotoUncheckedCreateInput>
    /**
     * In case the PetPhoto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PetPhotoUpdateInput, PetPhotoUncheckedUpdateInput>
  }


  /**
   * PetPhoto delete
   */
  export type PetPhotoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetPhoto
     */
    select?: PetPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetPhotoInclude<ExtArgs> | null
    /**
     * Filter which PetPhoto to delete.
     */
    where: PetPhotoWhereUniqueInput
  }


  /**
   * PetPhoto deleteMany
   */
  export type PetPhotoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PetPhotos to delete
     */
    where?: PetPhotoWhereInput
  }


  /**
   * PetPhoto without action
   */
  export type PetPhotoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetPhoto
     */
    select?: PetPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetPhotoInclude<ExtArgs> | null
  }



  /**
   * Model ChatRoom
   */

  export type AggregateChatRoom = {
    _count: ChatRoomCountAggregateOutputType | null
    _avg: ChatRoomAvgAggregateOutputType | null
    _sum: ChatRoomSumAggregateOutputType | null
    _min: ChatRoomMinAggregateOutputType | null
    _max: ChatRoomMaxAggregateOutputType | null
  }

  export type ChatRoomAvgAggregateOutputType = {
    chatRoomId: number | null
    useroneId: number | null
    usertwoId: number | null
  }

  export type ChatRoomSumAggregateOutputType = {
    chatRoomId: number | null
    useroneId: number | null
    usertwoId: number | null
  }

  export type ChatRoomMinAggregateOutputType = {
    chatRoomId: number | null
    userone: string | null
    useroneId: number | null
    usertwo: string | null
    usertwoId: number | null
  }

  export type ChatRoomMaxAggregateOutputType = {
    chatRoomId: number | null
    userone: string | null
    useroneId: number | null
    usertwo: string | null
    usertwoId: number | null
  }

  export type ChatRoomCountAggregateOutputType = {
    chatRoomId: number
    userone: number
    useroneId: number
    usertwo: number
    usertwoId: number
    _all: number
  }


  export type ChatRoomAvgAggregateInputType = {
    chatRoomId?: true
    useroneId?: true
    usertwoId?: true
  }

  export type ChatRoomSumAggregateInputType = {
    chatRoomId?: true
    useroneId?: true
    usertwoId?: true
  }

  export type ChatRoomMinAggregateInputType = {
    chatRoomId?: true
    userone?: true
    useroneId?: true
    usertwo?: true
    usertwoId?: true
  }

  export type ChatRoomMaxAggregateInputType = {
    chatRoomId?: true
    userone?: true
    useroneId?: true
    usertwo?: true
    usertwoId?: true
  }

  export type ChatRoomCountAggregateInputType = {
    chatRoomId?: true
    userone?: true
    useroneId?: true
    usertwo?: true
    usertwoId?: true
    _all?: true
  }

  export type ChatRoomAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRoom to aggregate.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatRooms
    **/
    _count?: true | ChatRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatRoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatRoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatRoomMaxAggregateInputType
  }

  export type GetChatRoomAggregateType<T extends ChatRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateChatRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatRoom[P]>
      : GetScalarType<T[P], AggregateChatRoom[P]>
  }




  export type ChatRoomGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChatRoomWhereInput
    orderBy?: ChatRoomOrderByWithAggregationInput | ChatRoomOrderByWithAggregationInput[]
    by: ChatRoomScalarFieldEnum[] | ChatRoomScalarFieldEnum
    having?: ChatRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatRoomCountAggregateInputType | true
    _avg?: ChatRoomAvgAggregateInputType
    _sum?: ChatRoomSumAggregateInputType
    _min?: ChatRoomMinAggregateInputType
    _max?: ChatRoomMaxAggregateInputType
  }

  export type ChatRoomGroupByOutputType = {
    chatRoomId: number
    userone: string
    useroneId: number
    usertwo: string
    usertwoId: number
    _count: ChatRoomCountAggregateOutputType | null
    _avg: ChatRoomAvgAggregateOutputType | null
    _sum: ChatRoomSumAggregateOutputType | null
    _min: ChatRoomMinAggregateOutputType | null
    _max: ChatRoomMaxAggregateOutputType | null
  }

  type GetChatRoomGroupByPayload<T extends ChatRoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
            : GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
        }
      >
    >


  export type ChatRoomSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    chatRoomId?: boolean
    userone?: boolean
    useroneId?: boolean
    usertwo?: boolean
    usertwoId?: boolean
    messages?: boolean | ChatRoom$messagesArgs<ExtArgs>
    _count?: boolean | ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoom"]>

  export type ChatRoomSelectScalar = {
    chatRoomId?: boolean
    userone?: boolean
    useroneId?: boolean
    usertwo?: boolean
    usertwoId?: boolean
  }

  export type ChatRoomInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatRoom$messagesArgs<ExtArgs>
    _count?: boolean | ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ChatRoomPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ChatRoom"
    objects: {
      messages: Prisma.$MessagesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      chatRoomId: number
      userone: string
      useroneId: number
      usertwo: string
      usertwoId: number
    }, ExtArgs["result"]["chatRoom"]>
    composites: {}
  }


  type ChatRoomGetPayload<S extends boolean | null | undefined | ChatRoomDefaultArgs> = $Result.GetResult<Prisma.$ChatRoomPayload, S>

  type ChatRoomCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChatRoomFindManyArgs, 'select' | 'include'> & {
      select?: ChatRoomCountAggregateInputType | true
    }

  export interface ChatRoomDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatRoom'], meta: { name: 'ChatRoom' } }
    /**
     * Find zero or one ChatRoom that matches the filter.
     * @param {ChatRoomFindUniqueArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatRoomFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChatRoomFindUniqueArgs<ExtArgs>>
    ): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ChatRoom that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChatRoomFindUniqueOrThrowArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatRoomFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatRoomFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ChatRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindFirstArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatRoomFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatRoomFindFirstArgs<ExtArgs>>
    ): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ChatRoom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindFirstOrThrowArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatRoomFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatRoomFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ChatRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatRooms
     * const chatRooms = await prisma.chatRoom.findMany()
     * 
     * // Get first 10 ChatRooms
     * const chatRooms = await prisma.chatRoom.findMany({ take: 10 })
     * 
     * // Only select the `chatRoomId`
     * const chatRoomWithChatRoomIdOnly = await prisma.chatRoom.findMany({ select: { chatRoomId: true } })
     * 
    **/
    findMany<T extends ChatRoomFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatRoomFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ChatRoom.
     * @param {ChatRoomCreateArgs} args - Arguments to create a ChatRoom.
     * @example
     * // Create one ChatRoom
     * const ChatRoom = await prisma.chatRoom.create({
     *   data: {
     *     // ... data to create a ChatRoom
     *   }
     * })
     * 
    **/
    create<T extends ChatRoomCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatRoomCreateArgs<ExtArgs>>
    ): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ChatRooms.
     *     @param {ChatRoomCreateManyArgs} args - Arguments to create many ChatRooms.
     *     @example
     *     // Create many ChatRooms
     *     const chatRoom = await prisma.chatRoom.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatRoomCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatRoomCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChatRoom.
     * @param {ChatRoomDeleteArgs} args - Arguments to delete one ChatRoom.
     * @example
     * // Delete one ChatRoom
     * const ChatRoom = await prisma.chatRoom.delete({
     *   where: {
     *     // ... filter to delete one ChatRoom
     *   }
     * })
     * 
    **/
    delete<T extends ChatRoomDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChatRoomDeleteArgs<ExtArgs>>
    ): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ChatRoom.
     * @param {ChatRoomUpdateArgs} args - Arguments to update one ChatRoom.
     * @example
     * // Update one ChatRoom
     * const chatRoom = await prisma.chatRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatRoomUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatRoomUpdateArgs<ExtArgs>>
    ): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ChatRooms.
     * @param {ChatRoomDeleteManyArgs} args - Arguments to filter ChatRooms to delete.
     * @example
     * // Delete a few ChatRooms
     * const { count } = await prisma.chatRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatRoomDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatRoomDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatRooms
     * const chatRoom = await prisma.chatRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatRoomUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChatRoomUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatRoom.
     * @param {ChatRoomUpsertArgs} args - Arguments to update or create a ChatRoom.
     * @example
     * // Update or create a ChatRoom
     * const chatRoom = await prisma.chatRoom.upsert({
     *   create: {
     *     // ... data to create a ChatRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatRoom we want to update
     *   }
     * })
    **/
    upsert<T extends ChatRoomUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChatRoomUpsertArgs<ExtArgs>>
    ): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomCountArgs} args - Arguments to filter ChatRooms to count.
     * @example
     * // Count the number of ChatRooms
     * const count = await prisma.chatRoom.count({
     *   where: {
     *     // ... the filter for the ChatRooms we want to count
     *   }
     * })
    **/
    count<T extends ChatRoomCountArgs>(
      args?: Subset<T, ChatRoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatRoomAggregateArgs>(args: Subset<T, ChatRoomAggregateArgs>): Prisma.PrismaPromise<GetChatRoomAggregateType<T>>

    /**
     * Group by ChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatRoomGroupByArgs['orderBy'] }
        : { orderBy?: ChatRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatRoom model
   */
  readonly fields: ChatRoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatRoomClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    messages<T extends ChatRoom$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoom$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ChatRoom model
   */ 
  interface ChatRoomFieldRefs {
    readonly chatRoomId: FieldRef<"ChatRoom", 'Int'>
    readonly userone: FieldRef<"ChatRoom", 'String'>
    readonly useroneId: FieldRef<"ChatRoom", 'Int'>
    readonly usertwo: FieldRef<"ChatRoom", 'String'>
    readonly usertwoId: FieldRef<"ChatRoom", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * ChatRoom findUnique
   */
  export type ChatRoomFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where: ChatRoomWhereUniqueInput
  }


  /**
   * ChatRoom findUniqueOrThrow
   */
  export type ChatRoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where: ChatRoomWhereUniqueInput
  }


  /**
   * ChatRoom findFirst
   */
  export type ChatRoomFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRooms.
     */
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }


  /**
   * ChatRoom findFirstOrThrow
   */
  export type ChatRoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRooms.
     */
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }


  /**
   * ChatRoom findMany
   */
  export type ChatRoomFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRooms to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }


  /**
   * ChatRoom create
   */
  export type ChatRoomCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatRoom.
     */
    data: XOR<ChatRoomCreateInput, ChatRoomUncheckedCreateInput>
  }


  /**
   * ChatRoom createMany
   */
  export type ChatRoomCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatRooms.
     */
    data: ChatRoomCreateManyInput | ChatRoomCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ChatRoom update
   */
  export type ChatRoomUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatRoom.
     */
    data: XOR<ChatRoomUpdateInput, ChatRoomUncheckedUpdateInput>
    /**
     * Choose, which ChatRoom to update.
     */
    where: ChatRoomWhereUniqueInput
  }


  /**
   * ChatRoom updateMany
   */
  export type ChatRoomUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatRooms.
     */
    data: XOR<ChatRoomUpdateManyMutationInput, ChatRoomUncheckedUpdateManyInput>
    /**
     * Filter which ChatRooms to update
     */
    where?: ChatRoomWhereInput
  }


  /**
   * ChatRoom upsert
   */
  export type ChatRoomUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatRoom to update in case it exists.
     */
    where: ChatRoomWhereUniqueInput
    /**
     * In case the ChatRoom found by the `where` argument doesn't exist, create a new ChatRoom with this data.
     */
    create: XOR<ChatRoomCreateInput, ChatRoomUncheckedCreateInput>
    /**
     * In case the ChatRoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatRoomUpdateInput, ChatRoomUncheckedUpdateInput>
  }


  /**
   * ChatRoom delete
   */
  export type ChatRoomDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter which ChatRoom to delete.
     */
    where: ChatRoomWhereUniqueInput
  }


  /**
   * ChatRoom deleteMany
   */
  export type ChatRoomDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRooms to delete
     */
    where?: ChatRoomWhereInput
  }


  /**
   * ChatRoom.messages
   */
  export type ChatRoom$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    where?: MessagesWhereInput
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    cursor?: MessagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }


  /**
   * ChatRoom without action
   */
  export type ChatRoomDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatRoomInclude<ExtArgs> | null
  }



  /**
   * Model Messages
   */

  export type AggregateMessages = {
    _count: MessagesCountAggregateOutputType | null
    _avg: MessagesAvgAggregateOutputType | null
    _sum: MessagesSumAggregateOutputType | null
    _min: MessagesMinAggregateOutputType | null
    _max: MessagesMaxAggregateOutputType | null
  }

  export type MessagesAvgAggregateOutputType = {
    messageId: number | null
    messageRoomId: number | null
  }

  export type MessagesSumAggregateOutputType = {
    messageId: number | null
    messageRoomId: number | null
  }

  export type MessagesMinAggregateOutputType = {
    messageId: number | null
    messageRoomId: number | null
    sender: string | null
    content: string | null
  }

  export type MessagesMaxAggregateOutputType = {
    messageId: number | null
    messageRoomId: number | null
    sender: string | null
    content: string | null
  }

  export type MessagesCountAggregateOutputType = {
    messageId: number
    messageRoomId: number
    sender: number
    content: number
    _all: number
  }


  export type MessagesAvgAggregateInputType = {
    messageId?: true
    messageRoomId?: true
  }

  export type MessagesSumAggregateInputType = {
    messageId?: true
    messageRoomId?: true
  }

  export type MessagesMinAggregateInputType = {
    messageId?: true
    messageRoomId?: true
    sender?: true
    content?: true
  }

  export type MessagesMaxAggregateInputType = {
    messageId?: true
    messageRoomId?: true
    sender?: true
    content?: true
  }

  export type MessagesCountAggregateInputType = {
    messageId?: true
    messageRoomId?: true
    sender?: true
    content?: true
    _all?: true
  }

  export type MessagesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to aggregate.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessagesMaxAggregateInputType
  }

  export type GetMessagesAggregateType<T extends MessagesAggregateArgs> = {
        [P in keyof T & keyof AggregateMessages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessages[P]>
      : GetScalarType<T[P], AggregateMessages[P]>
  }




  export type MessagesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessagesWhereInput
    orderBy?: MessagesOrderByWithAggregationInput | MessagesOrderByWithAggregationInput[]
    by: MessagesScalarFieldEnum[] | MessagesScalarFieldEnum
    having?: MessagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessagesCountAggregateInputType | true
    _avg?: MessagesAvgAggregateInputType
    _sum?: MessagesSumAggregateInputType
    _min?: MessagesMinAggregateInputType
    _max?: MessagesMaxAggregateInputType
  }

  export type MessagesGroupByOutputType = {
    messageId: number
    messageRoomId: number
    sender: string
    content: string
    _count: MessagesCountAggregateOutputType | null
    _avg: MessagesAvgAggregateOutputType | null
    _sum: MessagesSumAggregateOutputType | null
    _min: MessagesMinAggregateOutputType | null
    _max: MessagesMaxAggregateOutputType | null
  }

  type GetMessagesGroupByPayload<T extends MessagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessagesGroupByOutputType[P]>
            : GetScalarType<T[P], MessagesGroupByOutputType[P]>
        }
      >
    >


  export type MessagesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    messageId?: boolean
    messageRoomId?: boolean
    sender?: boolean
    content?: boolean
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messages"]>

  export type MessagesSelectScalar = {
    messageId?: boolean
    messageRoomId?: boolean
    sender?: boolean
    content?: boolean
  }

  export type MessagesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
  }


  export type $MessagesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Messages"
    objects: {
      chatRoom: Prisma.$ChatRoomPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      messageId: number
      messageRoomId: number
      sender: string
      content: string
    }, ExtArgs["result"]["messages"]>
    composites: {}
  }


  type MessagesGetPayload<S extends boolean | null | undefined | MessagesDefaultArgs> = $Result.GetResult<Prisma.$MessagesPayload, S>

  type MessagesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MessagesFindManyArgs, 'select' | 'include'> & {
      select?: MessagesCountAggregateInputType | true
    }

  export interface MessagesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Messages'], meta: { name: 'Messages' } }
    /**
     * Find zero or one Messages that matches the filter.
     * @param {MessagesFindUniqueArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessagesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesFindUniqueArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Messages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessagesFindUniqueOrThrowArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindFirstArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessagesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesFindFirstArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Messages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindFirstOrThrowArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.messages.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.messages.findMany({ take: 10 })
     * 
     * // Only select the `messageId`
     * const messagesWithMessageIdOnly = await prisma.messages.findMany({ select: { messageId: true } })
     * 
    **/
    findMany<T extends MessagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Messages.
     * @param {MessagesCreateArgs} args - Arguments to create a Messages.
     * @example
     * // Create one Messages
     * const Messages = await prisma.messages.create({
     *   data: {
     *     // ... data to create a Messages
     *   }
     * })
     * 
    **/
    create<T extends MessagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesCreateArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {MessagesCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const messages = await prisma.messages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Messages.
     * @param {MessagesDeleteArgs} args - Arguments to delete one Messages.
     * @example
     * // Delete one Messages
     * const Messages = await prisma.messages.delete({
     *   where: {
     *     // ... filter to delete one Messages
     *   }
     * })
     * 
    **/
    delete<T extends MessagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesDeleteArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Messages.
     * @param {MessagesUpdateArgs} args - Arguments to update one Messages.
     * @example
     * // Update one Messages
     * const messages = await prisma.messages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesUpdateArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessagesDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.messages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const messages = await prisma.messages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Messages.
     * @param {MessagesUpsertArgs} args - Arguments to update or create a Messages.
     * @example
     * // Update or create a Messages
     * const messages = await prisma.messages.upsert({
     *   create: {
     *     // ... data to create a Messages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Messages we want to update
     *   }
     * })
    **/
    upsert<T extends MessagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesUpsertArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.messages.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessagesCountArgs>(
      args?: Subset<T, MessagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessagesAggregateArgs>(args: Subset<T, MessagesAggregateArgs>): Prisma.PrismaPromise<GetMessagesAggregateType<T>>

    /**
     * Group by Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessagesGroupByArgs['orderBy'] }
        : { orderBy?: MessagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Messages model
   */
  readonly fields: MessagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Messages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessagesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    chatRoom<T extends ChatRoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoomDefaultArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Messages model
   */ 
  interface MessagesFieldRefs {
    readonly messageId: FieldRef<"Messages", 'Int'>
    readonly messageRoomId: FieldRef<"Messages", 'Int'>
    readonly sender: FieldRef<"Messages", 'String'>
    readonly content: FieldRef<"Messages", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Messages findUnique
   */
  export type MessagesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where: MessagesWhereUniqueInput
  }


  /**
   * Messages findUniqueOrThrow
   */
  export type MessagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where: MessagesWhereUniqueInput
  }


  /**
   * Messages findFirst
   */
  export type MessagesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }


  /**
   * Messages findFirstOrThrow
   */
  export type MessagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }


  /**
   * Messages findMany
   */
  export type MessagesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }


  /**
   * Messages create
   */
  export type MessagesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * The data needed to create a Messages.
     */
    data: XOR<MessagesCreateInput, MessagesUncheckedCreateInput>
  }


  /**
   * Messages createMany
   */
  export type MessagesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessagesCreateManyInput | MessagesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Messages update
   */
  export type MessagesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * The data needed to update a Messages.
     */
    data: XOR<MessagesUpdateInput, MessagesUncheckedUpdateInput>
    /**
     * Choose, which Messages to update.
     */
    where: MessagesWhereUniqueInput
  }


  /**
   * Messages updateMany
   */
  export type MessagesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessagesUpdateManyMutationInput, MessagesUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessagesWhereInput
  }


  /**
   * Messages upsert
   */
  export type MessagesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * The filter to search for the Messages to update in case it exists.
     */
    where: MessagesWhereUniqueInput
    /**
     * In case the Messages found by the `where` argument doesn't exist, create a new Messages with this data.
     */
    create: XOR<MessagesCreateInput, MessagesUncheckedCreateInput>
    /**
     * In case the Messages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessagesUpdateInput, MessagesUncheckedUpdateInput>
  }


  /**
   * Messages delete
   */
  export type MessagesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter which Messages to delete.
     */
    where: MessagesWhereUniqueInput
  }


  /**
   * Messages deleteMany
   */
  export type MessagesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessagesWhereInput
  }


  /**
   * Messages without action
   */
  export type MessagesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
  }



  /**
   * Model LocationInfo
   */

  export type AggregateLocationInfo = {
    _count: LocationInfoCountAggregateOutputType | null
    _avg: LocationInfoAvgAggregateOutputType | null
    _sum: LocationInfoSumAggregateOutputType | null
    _min: LocationInfoMinAggregateOutputType | null
    _max: LocationInfoMaxAggregateOutputType | null
  }

  export type LocationInfoAvgAggregateOutputType = {
    locationId: number | null
    userId: number | null
  }

  export type LocationInfoSumAggregateOutputType = {
    locationId: number | null
    userId: number | null
  }

  export type LocationInfoMinAggregateOutputType = {
    locationId: number | null
    cityName: string | null
    state: string | null
    country: string | null
    userId: number | null
  }

  export type LocationInfoMaxAggregateOutputType = {
    locationId: number | null
    cityName: string | null
    state: string | null
    country: string | null
    userId: number | null
  }

  export type LocationInfoCountAggregateOutputType = {
    locationId: number
    cityName: number
    state: number
    country: number
    userId: number
    _all: number
  }


  export type LocationInfoAvgAggregateInputType = {
    locationId?: true
    userId?: true
  }

  export type LocationInfoSumAggregateInputType = {
    locationId?: true
    userId?: true
  }

  export type LocationInfoMinAggregateInputType = {
    locationId?: true
    cityName?: true
    state?: true
    country?: true
    userId?: true
  }

  export type LocationInfoMaxAggregateInputType = {
    locationId?: true
    cityName?: true
    state?: true
    country?: true
    userId?: true
  }

  export type LocationInfoCountAggregateInputType = {
    locationId?: true
    cityName?: true
    state?: true
    country?: true
    userId?: true
    _all?: true
  }

  export type LocationInfoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationInfo to aggregate.
     */
    where?: LocationInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationInfos to fetch.
     */
    orderBy?: LocationInfoOrderByWithRelationInput | LocationInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LocationInfos
    **/
    _count?: true | LocationInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationInfoMaxAggregateInputType
  }

  export type GetLocationInfoAggregateType<T extends LocationInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateLocationInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocationInfo[P]>
      : GetScalarType<T[P], AggregateLocationInfo[P]>
  }




  export type LocationInfoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LocationInfoWhereInput
    orderBy?: LocationInfoOrderByWithAggregationInput | LocationInfoOrderByWithAggregationInput[]
    by: LocationInfoScalarFieldEnum[] | LocationInfoScalarFieldEnum
    having?: LocationInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationInfoCountAggregateInputType | true
    _avg?: LocationInfoAvgAggregateInputType
    _sum?: LocationInfoSumAggregateInputType
    _min?: LocationInfoMinAggregateInputType
    _max?: LocationInfoMaxAggregateInputType
  }

  export type LocationInfoGroupByOutputType = {
    locationId: number
    cityName: string
    state: string
    country: string
    userId: number
    _count: LocationInfoCountAggregateOutputType | null
    _avg: LocationInfoAvgAggregateOutputType | null
    _sum: LocationInfoSumAggregateOutputType | null
    _min: LocationInfoMinAggregateOutputType | null
    _max: LocationInfoMaxAggregateOutputType | null
  }

  type GetLocationInfoGroupByPayload<T extends LocationInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationInfoGroupByOutputType[P]>
            : GetScalarType<T[P], LocationInfoGroupByOutputType[P]>
        }
      >
    >


  export type LocationInfoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    locationId?: boolean
    cityName?: boolean
    state?: boolean
    country?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationInfo"]>

  export type LocationInfoSelectScalar = {
    locationId?: boolean
    cityName?: boolean
    state?: boolean
    country?: boolean
    userId?: boolean
  }

  export type LocationInfoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $LocationInfoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "LocationInfo"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      locationId: number
      cityName: string
      state: string
      country: string
      userId: number
    }, ExtArgs["result"]["locationInfo"]>
    composites: {}
  }


  type LocationInfoGetPayload<S extends boolean | null | undefined | LocationInfoDefaultArgs> = $Result.GetResult<Prisma.$LocationInfoPayload, S>

  type LocationInfoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<LocationInfoFindManyArgs, 'select' | 'include'> & {
      select?: LocationInfoCountAggregateInputType | true
    }

  export interface LocationInfoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LocationInfo'], meta: { name: 'LocationInfo' } }
    /**
     * Find zero or one LocationInfo that matches the filter.
     * @param {LocationInfoFindUniqueArgs} args - Arguments to find a LocationInfo
     * @example
     * // Get one LocationInfo
     * const locationInfo = await prisma.locationInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LocationInfoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LocationInfoFindUniqueArgs<ExtArgs>>
    ): Prisma__LocationInfoClient<$Result.GetResult<Prisma.$LocationInfoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LocationInfo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LocationInfoFindUniqueOrThrowArgs} args - Arguments to find a LocationInfo
     * @example
     * // Get one LocationInfo
     * const locationInfo = await prisma.locationInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LocationInfoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationInfoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LocationInfoClient<$Result.GetResult<Prisma.$LocationInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LocationInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationInfoFindFirstArgs} args - Arguments to find a LocationInfo
     * @example
     * // Get one LocationInfo
     * const locationInfo = await prisma.locationInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LocationInfoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationInfoFindFirstArgs<ExtArgs>>
    ): Prisma__LocationInfoClient<$Result.GetResult<Prisma.$LocationInfoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LocationInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationInfoFindFirstOrThrowArgs} args - Arguments to find a LocationInfo
     * @example
     * // Get one LocationInfo
     * const locationInfo = await prisma.locationInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LocationInfoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationInfoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LocationInfoClient<$Result.GetResult<Prisma.$LocationInfoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LocationInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationInfoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LocationInfos
     * const locationInfos = await prisma.locationInfo.findMany()
     * 
     * // Get first 10 LocationInfos
     * const locationInfos = await prisma.locationInfo.findMany({ take: 10 })
     * 
     * // Only select the `locationId`
     * const locationInfoWithLocationIdOnly = await prisma.locationInfo.findMany({ select: { locationId: true } })
     * 
    **/
    findMany<T extends LocationInfoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationInfoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationInfoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LocationInfo.
     * @param {LocationInfoCreateArgs} args - Arguments to create a LocationInfo.
     * @example
     * // Create one LocationInfo
     * const LocationInfo = await prisma.locationInfo.create({
     *   data: {
     *     // ... data to create a LocationInfo
     *   }
     * })
     * 
    **/
    create<T extends LocationInfoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LocationInfoCreateArgs<ExtArgs>>
    ): Prisma__LocationInfoClient<$Result.GetResult<Prisma.$LocationInfoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LocationInfos.
     *     @param {LocationInfoCreateManyArgs} args - Arguments to create many LocationInfos.
     *     @example
     *     // Create many LocationInfos
     *     const locationInfo = await prisma.locationInfo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LocationInfoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationInfoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LocationInfo.
     * @param {LocationInfoDeleteArgs} args - Arguments to delete one LocationInfo.
     * @example
     * // Delete one LocationInfo
     * const LocationInfo = await prisma.locationInfo.delete({
     *   where: {
     *     // ... filter to delete one LocationInfo
     *   }
     * })
     * 
    **/
    delete<T extends LocationInfoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LocationInfoDeleteArgs<ExtArgs>>
    ): Prisma__LocationInfoClient<$Result.GetResult<Prisma.$LocationInfoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LocationInfo.
     * @param {LocationInfoUpdateArgs} args - Arguments to update one LocationInfo.
     * @example
     * // Update one LocationInfo
     * const locationInfo = await prisma.locationInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LocationInfoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LocationInfoUpdateArgs<ExtArgs>>
    ): Prisma__LocationInfoClient<$Result.GetResult<Prisma.$LocationInfoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LocationInfos.
     * @param {LocationInfoDeleteManyArgs} args - Arguments to filter LocationInfos to delete.
     * @example
     * // Delete a few LocationInfos
     * const { count } = await prisma.locationInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LocationInfoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationInfoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocationInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LocationInfos
     * const locationInfo = await prisma.locationInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LocationInfoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LocationInfoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LocationInfo.
     * @param {LocationInfoUpsertArgs} args - Arguments to update or create a LocationInfo.
     * @example
     * // Update or create a LocationInfo
     * const locationInfo = await prisma.locationInfo.upsert({
     *   create: {
     *     // ... data to create a LocationInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LocationInfo we want to update
     *   }
     * })
    **/
    upsert<T extends LocationInfoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LocationInfoUpsertArgs<ExtArgs>>
    ): Prisma__LocationInfoClient<$Result.GetResult<Prisma.$LocationInfoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LocationInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationInfoCountArgs} args - Arguments to filter LocationInfos to count.
     * @example
     * // Count the number of LocationInfos
     * const count = await prisma.locationInfo.count({
     *   where: {
     *     // ... the filter for the LocationInfos we want to count
     *   }
     * })
    **/
    count<T extends LocationInfoCountArgs>(
      args?: Subset<T, LocationInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LocationInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationInfoAggregateArgs>(args: Subset<T, LocationInfoAggregateArgs>): Prisma.PrismaPromise<GetLocationInfoAggregateType<T>>

    /**
     * Group by LocationInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationInfoGroupByArgs['orderBy'] }
        : { orderBy?: LocationInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LocationInfo model
   */
  readonly fields: LocationInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LocationInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationInfoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LocationInfo model
   */ 
  interface LocationInfoFieldRefs {
    readonly locationId: FieldRef<"LocationInfo", 'Int'>
    readonly cityName: FieldRef<"LocationInfo", 'String'>
    readonly state: FieldRef<"LocationInfo", 'String'>
    readonly country: FieldRef<"LocationInfo", 'String'>
    readonly userId: FieldRef<"LocationInfo", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * LocationInfo findUnique
   */
  export type LocationInfoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationInfo
     */
    select?: LocationInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInfoInclude<ExtArgs> | null
    /**
     * Filter, which LocationInfo to fetch.
     */
    where: LocationInfoWhereUniqueInput
  }


  /**
   * LocationInfo findUniqueOrThrow
   */
  export type LocationInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationInfo
     */
    select?: LocationInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInfoInclude<ExtArgs> | null
    /**
     * Filter, which LocationInfo to fetch.
     */
    where: LocationInfoWhereUniqueInput
  }


  /**
   * LocationInfo findFirst
   */
  export type LocationInfoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationInfo
     */
    select?: LocationInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInfoInclude<ExtArgs> | null
    /**
     * Filter, which LocationInfo to fetch.
     */
    where?: LocationInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationInfos to fetch.
     */
    orderBy?: LocationInfoOrderByWithRelationInput | LocationInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationInfos.
     */
    cursor?: LocationInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationInfos.
     */
    distinct?: LocationInfoScalarFieldEnum | LocationInfoScalarFieldEnum[]
  }


  /**
   * LocationInfo findFirstOrThrow
   */
  export type LocationInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationInfo
     */
    select?: LocationInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInfoInclude<ExtArgs> | null
    /**
     * Filter, which LocationInfo to fetch.
     */
    where?: LocationInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationInfos to fetch.
     */
    orderBy?: LocationInfoOrderByWithRelationInput | LocationInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationInfos.
     */
    cursor?: LocationInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationInfos.
     */
    distinct?: LocationInfoScalarFieldEnum | LocationInfoScalarFieldEnum[]
  }


  /**
   * LocationInfo findMany
   */
  export type LocationInfoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationInfo
     */
    select?: LocationInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInfoInclude<ExtArgs> | null
    /**
     * Filter, which LocationInfos to fetch.
     */
    where?: LocationInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationInfos to fetch.
     */
    orderBy?: LocationInfoOrderByWithRelationInput | LocationInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LocationInfos.
     */
    cursor?: LocationInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationInfos.
     */
    skip?: number
    distinct?: LocationInfoScalarFieldEnum | LocationInfoScalarFieldEnum[]
  }


  /**
   * LocationInfo create
   */
  export type LocationInfoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationInfo
     */
    select?: LocationInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a LocationInfo.
     */
    data: XOR<LocationInfoCreateInput, LocationInfoUncheckedCreateInput>
  }


  /**
   * LocationInfo createMany
   */
  export type LocationInfoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LocationInfos.
     */
    data: LocationInfoCreateManyInput | LocationInfoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * LocationInfo update
   */
  export type LocationInfoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationInfo
     */
    select?: LocationInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a LocationInfo.
     */
    data: XOR<LocationInfoUpdateInput, LocationInfoUncheckedUpdateInput>
    /**
     * Choose, which LocationInfo to update.
     */
    where: LocationInfoWhereUniqueInput
  }


  /**
   * LocationInfo updateMany
   */
  export type LocationInfoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LocationInfos.
     */
    data: XOR<LocationInfoUpdateManyMutationInput, LocationInfoUncheckedUpdateManyInput>
    /**
     * Filter which LocationInfos to update
     */
    where?: LocationInfoWhereInput
  }


  /**
   * LocationInfo upsert
   */
  export type LocationInfoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationInfo
     */
    select?: LocationInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the LocationInfo to update in case it exists.
     */
    where: LocationInfoWhereUniqueInput
    /**
     * In case the LocationInfo found by the `where` argument doesn't exist, create a new LocationInfo with this data.
     */
    create: XOR<LocationInfoCreateInput, LocationInfoUncheckedCreateInput>
    /**
     * In case the LocationInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationInfoUpdateInput, LocationInfoUncheckedUpdateInput>
  }


  /**
   * LocationInfo delete
   */
  export type LocationInfoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationInfo
     */
    select?: LocationInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInfoInclude<ExtArgs> | null
    /**
     * Filter which LocationInfo to delete.
     */
    where: LocationInfoWhereUniqueInput
  }


  /**
   * LocationInfo deleteMany
   */
  export type LocationInfoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationInfos to delete
     */
    where?: LocationInfoWhereInput
  }


  /**
   * LocationInfo without action
   */
  export type LocationInfoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationInfo
     */
    select?: LocationInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInfoInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    username: 'username',
    email: 'email',
    password: 'password',
    userImage: 'userImage'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PetProfileScalarFieldEnum: {
    petId: 'petId',
    petName: 'petName',
    species: 'species',
    breed: 'breed',
    age: 'age',
    vaxxed: 'vaxxed',
    sprayedNeutered: 'sprayedNeutered',
    bio: 'bio',
    profileImage: 'profileImage',
    location: 'location',
    userId: 'userId'
  };

  export type PetProfileScalarFieldEnum = (typeof PetProfileScalarFieldEnum)[keyof typeof PetProfileScalarFieldEnum]


  export const PetPhotoScalarFieldEnum: {
    photoId: 'photoId',
    imageUrl: 'imageUrl',
    petProfileId: 'petProfileId',
    location: 'location'
  };

  export type PetPhotoScalarFieldEnum = (typeof PetPhotoScalarFieldEnum)[keyof typeof PetPhotoScalarFieldEnum]


  export const ChatRoomScalarFieldEnum: {
    chatRoomId: 'chatRoomId',
    userone: 'userone',
    useroneId: 'useroneId',
    usertwo: 'usertwo',
    usertwoId: 'usertwoId'
  };

  export type ChatRoomScalarFieldEnum = (typeof ChatRoomScalarFieldEnum)[keyof typeof ChatRoomScalarFieldEnum]


  export const MessagesScalarFieldEnum: {
    messageId: 'messageId',
    messageRoomId: 'messageRoomId',
    sender: 'sender',
    content: 'content'
  };

  export type MessagesScalarFieldEnum = (typeof MessagesScalarFieldEnum)[keyof typeof MessagesScalarFieldEnum]


  export const LocationInfoScalarFieldEnum: {
    locationId: 'locationId',
    cityName: 'cityName',
    state: 'state',
    country: 'country',
    userId: 'userId'
  };

  export type LocationInfoScalarFieldEnum = (typeof LocationInfoScalarFieldEnum)[keyof typeof LocationInfoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    userImage?: StringFilter<"User"> | string
    petprofile?: XOR<PetProfileNullableRelationFilter, PetProfileWhereInput> | null
    locationinfo?: XOR<LocationInfoNullableRelationFilter, LocationInfoWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userImage?: SortOrder
    petprofile?: PetProfileOrderByWithRelationInput
    locationinfo?: LocationInfoOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    userImage?: StringFilter<"User"> | string
    petprofile?: XOR<PetProfileNullableRelationFilter, PetProfileWhereInput> | null
    locationinfo?: XOR<LocationInfoNullableRelationFilter, LocationInfoWhereInput> | null
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userImage?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    userImage?: StringWithAggregatesFilter<"User"> | string
  }

  export type PetProfileWhereInput = {
    AND?: PetProfileWhereInput | PetProfileWhereInput[]
    OR?: PetProfileWhereInput[]
    NOT?: PetProfileWhereInput | PetProfileWhereInput[]
    petId?: IntFilter<"PetProfile"> | number
    petName?: StringFilter<"PetProfile"> | string
    species?: StringFilter<"PetProfile"> | string
    breed?: StringFilter<"PetProfile"> | string
    age?: IntFilter<"PetProfile"> | number
    vaxxed?: StringFilter<"PetProfile"> | string
    sprayedNeutered?: StringFilter<"PetProfile"> | string
    bio?: StringFilter<"PetProfile"> | string
    profileImage?: StringFilter<"PetProfile"> | string
    location?: StringFilter<"PetProfile"> | string
    userId?: IntFilter<"PetProfile"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    petPhotos?: PetPhotoListRelationFilter
  }

  export type PetProfileOrderByWithRelationInput = {
    petId?: SortOrder
    petName?: SortOrder
    species?: SortOrder
    breed?: SortOrder
    age?: SortOrder
    vaxxed?: SortOrder
    sprayedNeutered?: SortOrder
    bio?: SortOrder
    profileImage?: SortOrder
    location?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    petPhotos?: PetPhotoOrderByRelationAggregateInput
  }

  export type PetProfileWhereUniqueInput = Prisma.AtLeast<{
    petId?: number
    userId?: number
    AND?: PetProfileWhereInput | PetProfileWhereInput[]
    OR?: PetProfileWhereInput[]
    NOT?: PetProfileWhereInput | PetProfileWhereInput[]
    petName?: StringFilter<"PetProfile"> | string
    species?: StringFilter<"PetProfile"> | string
    breed?: StringFilter<"PetProfile"> | string
    age?: IntFilter<"PetProfile"> | number
    vaxxed?: StringFilter<"PetProfile"> | string
    sprayedNeutered?: StringFilter<"PetProfile"> | string
    bio?: StringFilter<"PetProfile"> | string
    profileImage?: StringFilter<"PetProfile"> | string
    location?: StringFilter<"PetProfile"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    petPhotos?: PetPhotoListRelationFilter
  }, "petId" | "userId">

  export type PetProfileOrderByWithAggregationInput = {
    petId?: SortOrder
    petName?: SortOrder
    species?: SortOrder
    breed?: SortOrder
    age?: SortOrder
    vaxxed?: SortOrder
    sprayedNeutered?: SortOrder
    bio?: SortOrder
    profileImage?: SortOrder
    location?: SortOrder
    userId?: SortOrder
    _count?: PetProfileCountOrderByAggregateInput
    _avg?: PetProfileAvgOrderByAggregateInput
    _max?: PetProfileMaxOrderByAggregateInput
    _min?: PetProfileMinOrderByAggregateInput
    _sum?: PetProfileSumOrderByAggregateInput
  }

  export type PetProfileScalarWhereWithAggregatesInput = {
    AND?: PetProfileScalarWhereWithAggregatesInput | PetProfileScalarWhereWithAggregatesInput[]
    OR?: PetProfileScalarWhereWithAggregatesInput[]
    NOT?: PetProfileScalarWhereWithAggregatesInput | PetProfileScalarWhereWithAggregatesInput[]
    petId?: IntWithAggregatesFilter<"PetProfile"> | number
    petName?: StringWithAggregatesFilter<"PetProfile"> | string
    species?: StringWithAggregatesFilter<"PetProfile"> | string
    breed?: StringWithAggregatesFilter<"PetProfile"> | string
    age?: IntWithAggregatesFilter<"PetProfile"> | number
    vaxxed?: StringWithAggregatesFilter<"PetProfile"> | string
    sprayedNeutered?: StringWithAggregatesFilter<"PetProfile"> | string
    bio?: StringWithAggregatesFilter<"PetProfile"> | string
    profileImage?: StringWithAggregatesFilter<"PetProfile"> | string
    location?: StringWithAggregatesFilter<"PetProfile"> | string
    userId?: IntWithAggregatesFilter<"PetProfile"> | number
  }

  export type PetPhotoWhereInput = {
    AND?: PetPhotoWhereInput | PetPhotoWhereInput[]
    OR?: PetPhotoWhereInput[]
    NOT?: PetPhotoWhereInput | PetPhotoWhereInput[]
    photoId?: IntFilter<"PetPhoto"> | number
    imageUrl?: StringFilter<"PetPhoto"> | string
    petProfileId?: IntFilter<"PetPhoto"> | number
    location?: StringFilter<"PetPhoto"> | string
    petProfile?: XOR<PetProfileRelationFilter, PetProfileWhereInput>
  }

  export type PetPhotoOrderByWithRelationInput = {
    photoId?: SortOrder
    imageUrl?: SortOrder
    petProfileId?: SortOrder
    location?: SortOrder
    petProfile?: PetProfileOrderByWithRelationInput
  }

  export type PetPhotoWhereUniqueInput = Prisma.AtLeast<{
    photoId?: number
    AND?: PetPhotoWhereInput | PetPhotoWhereInput[]
    OR?: PetPhotoWhereInput[]
    NOT?: PetPhotoWhereInput | PetPhotoWhereInput[]
    imageUrl?: StringFilter<"PetPhoto"> | string
    petProfileId?: IntFilter<"PetPhoto"> | number
    location?: StringFilter<"PetPhoto"> | string
    petProfile?: XOR<PetProfileRelationFilter, PetProfileWhereInput>
  }, "photoId">

  export type PetPhotoOrderByWithAggregationInput = {
    photoId?: SortOrder
    imageUrl?: SortOrder
    petProfileId?: SortOrder
    location?: SortOrder
    _count?: PetPhotoCountOrderByAggregateInput
    _avg?: PetPhotoAvgOrderByAggregateInput
    _max?: PetPhotoMaxOrderByAggregateInput
    _min?: PetPhotoMinOrderByAggregateInput
    _sum?: PetPhotoSumOrderByAggregateInput
  }

  export type PetPhotoScalarWhereWithAggregatesInput = {
    AND?: PetPhotoScalarWhereWithAggregatesInput | PetPhotoScalarWhereWithAggregatesInput[]
    OR?: PetPhotoScalarWhereWithAggregatesInput[]
    NOT?: PetPhotoScalarWhereWithAggregatesInput | PetPhotoScalarWhereWithAggregatesInput[]
    photoId?: IntWithAggregatesFilter<"PetPhoto"> | number
    imageUrl?: StringWithAggregatesFilter<"PetPhoto"> | string
    petProfileId?: IntWithAggregatesFilter<"PetPhoto"> | number
    location?: StringWithAggregatesFilter<"PetPhoto"> | string
  }

  export type ChatRoomWhereInput = {
    AND?: ChatRoomWhereInput | ChatRoomWhereInput[]
    OR?: ChatRoomWhereInput[]
    NOT?: ChatRoomWhereInput | ChatRoomWhereInput[]
    chatRoomId?: IntFilter<"ChatRoom"> | number
    userone?: StringFilter<"ChatRoom"> | string
    useroneId?: IntFilter<"ChatRoom"> | number
    usertwo?: StringFilter<"ChatRoom"> | string
    usertwoId?: IntFilter<"ChatRoom"> | number
    messages?: MessagesListRelationFilter
  }

  export type ChatRoomOrderByWithRelationInput = {
    chatRoomId?: SortOrder
    userone?: SortOrder
    useroneId?: SortOrder
    usertwo?: SortOrder
    usertwoId?: SortOrder
    messages?: MessagesOrderByRelationAggregateInput
  }

  export type ChatRoomWhereUniqueInput = Prisma.AtLeast<{
    chatRoomId?: number
    AND?: ChatRoomWhereInput | ChatRoomWhereInput[]
    OR?: ChatRoomWhereInput[]
    NOT?: ChatRoomWhereInput | ChatRoomWhereInput[]
    userone?: StringFilter<"ChatRoom"> | string
    useroneId?: IntFilter<"ChatRoom"> | number
    usertwo?: StringFilter<"ChatRoom"> | string
    usertwoId?: IntFilter<"ChatRoom"> | number
    messages?: MessagesListRelationFilter
  }, "chatRoomId">

  export type ChatRoomOrderByWithAggregationInput = {
    chatRoomId?: SortOrder
    userone?: SortOrder
    useroneId?: SortOrder
    usertwo?: SortOrder
    usertwoId?: SortOrder
    _count?: ChatRoomCountOrderByAggregateInput
    _avg?: ChatRoomAvgOrderByAggregateInput
    _max?: ChatRoomMaxOrderByAggregateInput
    _min?: ChatRoomMinOrderByAggregateInput
    _sum?: ChatRoomSumOrderByAggregateInput
  }

  export type ChatRoomScalarWhereWithAggregatesInput = {
    AND?: ChatRoomScalarWhereWithAggregatesInput | ChatRoomScalarWhereWithAggregatesInput[]
    OR?: ChatRoomScalarWhereWithAggregatesInput[]
    NOT?: ChatRoomScalarWhereWithAggregatesInput | ChatRoomScalarWhereWithAggregatesInput[]
    chatRoomId?: IntWithAggregatesFilter<"ChatRoom"> | number
    userone?: StringWithAggregatesFilter<"ChatRoom"> | string
    useroneId?: IntWithAggregatesFilter<"ChatRoom"> | number
    usertwo?: StringWithAggregatesFilter<"ChatRoom"> | string
    usertwoId?: IntWithAggregatesFilter<"ChatRoom"> | number
  }

  export type MessagesWhereInput = {
    AND?: MessagesWhereInput | MessagesWhereInput[]
    OR?: MessagesWhereInput[]
    NOT?: MessagesWhereInput | MessagesWhereInput[]
    messageId?: IntFilter<"Messages"> | number
    messageRoomId?: IntFilter<"Messages"> | number
    sender?: StringFilter<"Messages"> | string
    content?: StringFilter<"Messages"> | string
    chatRoom?: XOR<ChatRoomRelationFilter, ChatRoomWhereInput>
  }

  export type MessagesOrderByWithRelationInput = {
    messageId?: SortOrder
    messageRoomId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    chatRoom?: ChatRoomOrderByWithRelationInput
  }

  export type MessagesWhereUniqueInput = Prisma.AtLeast<{
    messageId?: number
    AND?: MessagesWhereInput | MessagesWhereInput[]
    OR?: MessagesWhereInput[]
    NOT?: MessagesWhereInput | MessagesWhereInput[]
    messageRoomId?: IntFilter<"Messages"> | number
    sender?: StringFilter<"Messages"> | string
    content?: StringFilter<"Messages"> | string
    chatRoom?: XOR<ChatRoomRelationFilter, ChatRoomWhereInput>
  }, "messageId">

  export type MessagesOrderByWithAggregationInput = {
    messageId?: SortOrder
    messageRoomId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    _count?: MessagesCountOrderByAggregateInput
    _avg?: MessagesAvgOrderByAggregateInput
    _max?: MessagesMaxOrderByAggregateInput
    _min?: MessagesMinOrderByAggregateInput
    _sum?: MessagesSumOrderByAggregateInput
  }

  export type MessagesScalarWhereWithAggregatesInput = {
    AND?: MessagesScalarWhereWithAggregatesInput | MessagesScalarWhereWithAggregatesInput[]
    OR?: MessagesScalarWhereWithAggregatesInput[]
    NOT?: MessagesScalarWhereWithAggregatesInput | MessagesScalarWhereWithAggregatesInput[]
    messageId?: IntWithAggregatesFilter<"Messages"> | number
    messageRoomId?: IntWithAggregatesFilter<"Messages"> | number
    sender?: StringWithAggregatesFilter<"Messages"> | string
    content?: StringWithAggregatesFilter<"Messages"> | string
  }

  export type LocationInfoWhereInput = {
    AND?: LocationInfoWhereInput | LocationInfoWhereInput[]
    OR?: LocationInfoWhereInput[]
    NOT?: LocationInfoWhereInput | LocationInfoWhereInput[]
    locationId?: IntFilter<"LocationInfo"> | number
    cityName?: StringFilter<"LocationInfo"> | string
    state?: StringFilter<"LocationInfo"> | string
    country?: StringFilter<"LocationInfo"> | string
    userId?: IntFilter<"LocationInfo"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type LocationInfoOrderByWithRelationInput = {
    locationId?: SortOrder
    cityName?: SortOrder
    state?: SortOrder
    country?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type LocationInfoWhereUniqueInput = Prisma.AtLeast<{
    locationId?: number
    userId?: number
    AND?: LocationInfoWhereInput | LocationInfoWhereInput[]
    OR?: LocationInfoWhereInput[]
    NOT?: LocationInfoWhereInput | LocationInfoWhereInput[]
    cityName?: StringFilter<"LocationInfo"> | string
    state?: StringFilter<"LocationInfo"> | string
    country?: StringFilter<"LocationInfo"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "locationId" | "userId">

  export type LocationInfoOrderByWithAggregationInput = {
    locationId?: SortOrder
    cityName?: SortOrder
    state?: SortOrder
    country?: SortOrder
    userId?: SortOrder
    _count?: LocationInfoCountOrderByAggregateInput
    _avg?: LocationInfoAvgOrderByAggregateInput
    _max?: LocationInfoMaxOrderByAggregateInput
    _min?: LocationInfoMinOrderByAggregateInput
    _sum?: LocationInfoSumOrderByAggregateInput
  }

  export type LocationInfoScalarWhereWithAggregatesInput = {
    AND?: LocationInfoScalarWhereWithAggregatesInput | LocationInfoScalarWhereWithAggregatesInput[]
    OR?: LocationInfoScalarWhereWithAggregatesInput[]
    NOT?: LocationInfoScalarWhereWithAggregatesInput | LocationInfoScalarWhereWithAggregatesInput[]
    locationId?: IntWithAggregatesFilter<"LocationInfo"> | number
    cityName?: StringWithAggregatesFilter<"LocationInfo"> | string
    state?: StringWithAggregatesFilter<"LocationInfo"> | string
    country?: StringWithAggregatesFilter<"LocationInfo"> | string
    userId?: IntWithAggregatesFilter<"LocationInfo"> | number
  }

  export type UserCreateInput = {
    name: string
    username: string
    email: string
    password: string
    userImage: string
    petprofile?: PetProfileCreateNestedOneWithoutUserInput
    locationinfo?: LocationInfoCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    username: string
    email: string
    password: string
    userImage: string
    petprofile?: PetProfileUncheckedCreateNestedOneWithoutUserInput
    locationinfo?: LocationInfoUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userImage?: StringFieldUpdateOperationsInput | string
    petprofile?: PetProfileUpdateOneWithoutUserNestedInput
    locationinfo?: LocationInfoUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userImage?: StringFieldUpdateOperationsInput | string
    petprofile?: PetProfileUncheckedUpdateOneWithoutUserNestedInput
    locationinfo?: LocationInfoUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    username: string
    email: string
    password: string
    userImage: string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userImage?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userImage?: StringFieldUpdateOperationsInput | string
  }

  export type PetProfileCreateInput = {
    petName: string
    species: string
    breed: string
    age: number
    vaxxed: string
    sprayedNeutered: string
    bio: string
    profileImage: string
    location: string
    user: UserCreateNestedOneWithoutPetprofileInput
    petPhotos?: PetPhotoCreateNestedManyWithoutPetProfileInput
  }

  export type PetProfileUncheckedCreateInput = {
    petId?: number
    petName: string
    species: string
    breed: string
    age: number
    vaxxed: string
    sprayedNeutered: string
    bio: string
    profileImage: string
    location: string
    userId: number
    petPhotos?: PetPhotoUncheckedCreateNestedManyWithoutPetProfileInput
  }

  export type PetProfileUpdateInput = {
    petName?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    vaxxed?: StringFieldUpdateOperationsInput | string
    sprayedNeutered?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPetprofileNestedInput
    petPhotos?: PetPhotoUpdateManyWithoutPetProfileNestedInput
  }

  export type PetProfileUncheckedUpdateInput = {
    petId?: IntFieldUpdateOperationsInput | number
    petName?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    vaxxed?: StringFieldUpdateOperationsInput | string
    sprayedNeutered?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    petPhotos?: PetPhotoUncheckedUpdateManyWithoutPetProfileNestedInput
  }

  export type PetProfileCreateManyInput = {
    petId?: number
    petName: string
    species: string
    breed: string
    age: number
    vaxxed: string
    sprayedNeutered: string
    bio: string
    profileImage: string
    location: string
    userId: number
  }

  export type PetProfileUpdateManyMutationInput = {
    petName?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    vaxxed?: StringFieldUpdateOperationsInput | string
    sprayedNeutered?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type PetProfileUncheckedUpdateManyInput = {
    petId?: IntFieldUpdateOperationsInput | number
    petName?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    vaxxed?: StringFieldUpdateOperationsInput | string
    sprayedNeutered?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type PetPhotoCreateInput = {
    imageUrl: string
    location: string
    petProfile: PetProfileCreateNestedOneWithoutPetPhotosInput
  }

  export type PetPhotoUncheckedCreateInput = {
    photoId?: number
    imageUrl: string
    petProfileId: number
    location: string
  }

  export type PetPhotoUpdateInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    petProfile?: PetProfileUpdateOneRequiredWithoutPetPhotosNestedInput
  }

  export type PetPhotoUncheckedUpdateInput = {
    photoId?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    petProfileId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
  }

  export type PetPhotoCreateManyInput = {
    photoId?: number
    imageUrl: string
    petProfileId: number
    location: string
  }

  export type PetPhotoUpdateManyMutationInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type PetPhotoUncheckedUpdateManyInput = {
    photoId?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    petProfileId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
  }

  export type ChatRoomCreateInput = {
    userone: string
    useroneId: number
    usertwo: string
    usertwoId: number
    messages?: MessagesCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomUncheckedCreateInput = {
    chatRoomId?: number
    userone: string
    useroneId: number
    usertwo: string
    usertwoId: number
    messages?: MessagesUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomUpdateInput = {
    userone?: StringFieldUpdateOperationsInput | string
    useroneId?: IntFieldUpdateOperationsInput | number
    usertwo?: StringFieldUpdateOperationsInput | string
    usertwoId?: IntFieldUpdateOperationsInput | number
    messages?: MessagesUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateInput = {
    chatRoomId?: IntFieldUpdateOperationsInput | number
    userone?: StringFieldUpdateOperationsInput | string
    useroneId?: IntFieldUpdateOperationsInput | number
    usertwo?: StringFieldUpdateOperationsInput | string
    usertwoId?: IntFieldUpdateOperationsInput | number
    messages?: MessagesUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomCreateManyInput = {
    chatRoomId?: number
    userone: string
    useroneId: number
    usertwo: string
    usertwoId: number
  }

  export type ChatRoomUpdateManyMutationInput = {
    userone?: StringFieldUpdateOperationsInput | string
    useroneId?: IntFieldUpdateOperationsInput | number
    usertwo?: StringFieldUpdateOperationsInput | string
    usertwoId?: IntFieldUpdateOperationsInput | number
  }

  export type ChatRoomUncheckedUpdateManyInput = {
    chatRoomId?: IntFieldUpdateOperationsInput | number
    userone?: StringFieldUpdateOperationsInput | string
    useroneId?: IntFieldUpdateOperationsInput | number
    usertwo?: StringFieldUpdateOperationsInput | string
    usertwoId?: IntFieldUpdateOperationsInput | number
  }

  export type MessagesCreateInput = {
    sender: string
    content: string
    chatRoom: ChatRoomCreateNestedOneWithoutMessagesInput
  }

  export type MessagesUncheckedCreateInput = {
    messageId?: number
    messageRoomId: number
    sender: string
    content: string
  }

  export type MessagesUpdateInput = {
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    chatRoom?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessagesUncheckedUpdateInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    messageRoomId?: IntFieldUpdateOperationsInput | number
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MessagesCreateManyInput = {
    messageId?: number
    messageRoomId: number
    sender: string
    content: string
  }

  export type MessagesUpdateManyMutationInput = {
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MessagesUncheckedUpdateManyInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    messageRoomId?: IntFieldUpdateOperationsInput | number
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type LocationInfoCreateInput = {
    cityName: string
    state: string
    country: string
    user: UserCreateNestedOneWithoutLocationinfoInput
  }

  export type LocationInfoUncheckedCreateInput = {
    locationId?: number
    cityName: string
    state: string
    country: string
    userId: number
  }

  export type LocationInfoUpdateInput = {
    cityName?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutLocationinfoNestedInput
  }

  export type LocationInfoUncheckedUpdateInput = {
    locationId?: IntFieldUpdateOperationsInput | number
    cityName?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type LocationInfoCreateManyInput = {
    locationId?: number
    cityName: string
    state: string
    country: string
    userId: number
  }

  export type LocationInfoUpdateManyMutationInput = {
    cityName?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type LocationInfoUncheckedUpdateManyInput = {
    locationId?: IntFieldUpdateOperationsInput | number
    cityName?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PetProfileNullableRelationFilter = {
    is?: PetProfileWhereInput | null
    isNot?: PetProfileWhereInput | null
  }

  export type LocationInfoNullableRelationFilter = {
    is?: LocationInfoWhereInput | null
    isNot?: LocationInfoWhereInput | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userImage?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userImage?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userImage?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PetPhotoListRelationFilter = {
    every?: PetPhotoWhereInput
    some?: PetPhotoWhereInput
    none?: PetPhotoWhereInput
  }

  export type PetPhotoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PetProfileCountOrderByAggregateInput = {
    petId?: SortOrder
    petName?: SortOrder
    species?: SortOrder
    breed?: SortOrder
    age?: SortOrder
    vaxxed?: SortOrder
    sprayedNeutered?: SortOrder
    bio?: SortOrder
    profileImage?: SortOrder
    location?: SortOrder
    userId?: SortOrder
  }

  export type PetProfileAvgOrderByAggregateInput = {
    petId?: SortOrder
    age?: SortOrder
    userId?: SortOrder
  }

  export type PetProfileMaxOrderByAggregateInput = {
    petId?: SortOrder
    petName?: SortOrder
    species?: SortOrder
    breed?: SortOrder
    age?: SortOrder
    vaxxed?: SortOrder
    sprayedNeutered?: SortOrder
    bio?: SortOrder
    profileImage?: SortOrder
    location?: SortOrder
    userId?: SortOrder
  }

  export type PetProfileMinOrderByAggregateInput = {
    petId?: SortOrder
    petName?: SortOrder
    species?: SortOrder
    breed?: SortOrder
    age?: SortOrder
    vaxxed?: SortOrder
    sprayedNeutered?: SortOrder
    bio?: SortOrder
    profileImage?: SortOrder
    location?: SortOrder
    userId?: SortOrder
  }

  export type PetProfileSumOrderByAggregateInput = {
    petId?: SortOrder
    age?: SortOrder
    userId?: SortOrder
  }

  export type PetProfileRelationFilter = {
    is?: PetProfileWhereInput
    isNot?: PetProfileWhereInput
  }

  export type PetPhotoCountOrderByAggregateInput = {
    photoId?: SortOrder
    imageUrl?: SortOrder
    petProfileId?: SortOrder
    location?: SortOrder
  }

  export type PetPhotoAvgOrderByAggregateInput = {
    photoId?: SortOrder
    petProfileId?: SortOrder
  }

  export type PetPhotoMaxOrderByAggregateInput = {
    photoId?: SortOrder
    imageUrl?: SortOrder
    petProfileId?: SortOrder
    location?: SortOrder
  }

  export type PetPhotoMinOrderByAggregateInput = {
    photoId?: SortOrder
    imageUrl?: SortOrder
    petProfileId?: SortOrder
    location?: SortOrder
  }

  export type PetPhotoSumOrderByAggregateInput = {
    photoId?: SortOrder
    petProfileId?: SortOrder
  }

  export type MessagesListRelationFilter = {
    every?: MessagesWhereInput
    some?: MessagesWhereInput
    none?: MessagesWhereInput
  }

  export type MessagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatRoomCountOrderByAggregateInput = {
    chatRoomId?: SortOrder
    userone?: SortOrder
    useroneId?: SortOrder
    usertwo?: SortOrder
    usertwoId?: SortOrder
  }

  export type ChatRoomAvgOrderByAggregateInput = {
    chatRoomId?: SortOrder
    useroneId?: SortOrder
    usertwoId?: SortOrder
  }

  export type ChatRoomMaxOrderByAggregateInput = {
    chatRoomId?: SortOrder
    userone?: SortOrder
    useroneId?: SortOrder
    usertwo?: SortOrder
    usertwoId?: SortOrder
  }

  export type ChatRoomMinOrderByAggregateInput = {
    chatRoomId?: SortOrder
    userone?: SortOrder
    useroneId?: SortOrder
    usertwo?: SortOrder
    usertwoId?: SortOrder
  }

  export type ChatRoomSumOrderByAggregateInput = {
    chatRoomId?: SortOrder
    useroneId?: SortOrder
    usertwoId?: SortOrder
  }

  export type ChatRoomRelationFilter = {
    is?: ChatRoomWhereInput
    isNot?: ChatRoomWhereInput
  }

  export type MessagesCountOrderByAggregateInput = {
    messageId?: SortOrder
    messageRoomId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
  }

  export type MessagesAvgOrderByAggregateInput = {
    messageId?: SortOrder
    messageRoomId?: SortOrder
  }

  export type MessagesMaxOrderByAggregateInput = {
    messageId?: SortOrder
    messageRoomId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
  }

  export type MessagesMinOrderByAggregateInput = {
    messageId?: SortOrder
    messageRoomId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
  }

  export type MessagesSumOrderByAggregateInput = {
    messageId?: SortOrder
    messageRoomId?: SortOrder
  }

  export type LocationInfoCountOrderByAggregateInput = {
    locationId?: SortOrder
    cityName?: SortOrder
    state?: SortOrder
    country?: SortOrder
    userId?: SortOrder
  }

  export type LocationInfoAvgOrderByAggregateInput = {
    locationId?: SortOrder
    userId?: SortOrder
  }

  export type LocationInfoMaxOrderByAggregateInput = {
    locationId?: SortOrder
    cityName?: SortOrder
    state?: SortOrder
    country?: SortOrder
    userId?: SortOrder
  }

  export type LocationInfoMinOrderByAggregateInput = {
    locationId?: SortOrder
    cityName?: SortOrder
    state?: SortOrder
    country?: SortOrder
    userId?: SortOrder
  }

  export type LocationInfoSumOrderByAggregateInput = {
    locationId?: SortOrder
    userId?: SortOrder
  }

  export type PetProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<PetProfileCreateWithoutUserInput, PetProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PetProfileCreateOrConnectWithoutUserInput
    connect?: PetProfileWhereUniqueInput
  }

  export type LocationInfoCreateNestedOneWithoutUserInput = {
    create?: XOR<LocationInfoCreateWithoutUserInput, LocationInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: LocationInfoCreateOrConnectWithoutUserInput
    connect?: LocationInfoWhereUniqueInput
  }

  export type PetProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PetProfileCreateWithoutUserInput, PetProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PetProfileCreateOrConnectWithoutUserInput
    connect?: PetProfileWhereUniqueInput
  }

  export type LocationInfoUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<LocationInfoCreateWithoutUserInput, LocationInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: LocationInfoCreateOrConnectWithoutUserInput
    connect?: LocationInfoWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PetProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<PetProfileCreateWithoutUserInput, PetProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PetProfileCreateOrConnectWithoutUserInput
    upsert?: PetProfileUpsertWithoutUserInput
    disconnect?: PetProfileWhereInput | boolean
    delete?: PetProfileWhereInput | boolean
    connect?: PetProfileWhereUniqueInput
    update?: XOR<XOR<PetProfileUpdateToOneWithWhereWithoutUserInput, PetProfileUpdateWithoutUserInput>, PetProfileUncheckedUpdateWithoutUserInput>
  }

  export type LocationInfoUpdateOneWithoutUserNestedInput = {
    create?: XOR<LocationInfoCreateWithoutUserInput, LocationInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: LocationInfoCreateOrConnectWithoutUserInput
    upsert?: LocationInfoUpsertWithoutUserInput
    disconnect?: LocationInfoWhereInput | boolean
    delete?: LocationInfoWhereInput | boolean
    connect?: LocationInfoWhereUniqueInput
    update?: XOR<XOR<LocationInfoUpdateToOneWithWhereWithoutUserInput, LocationInfoUpdateWithoutUserInput>, LocationInfoUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PetProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PetProfileCreateWithoutUserInput, PetProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PetProfileCreateOrConnectWithoutUserInput
    upsert?: PetProfileUpsertWithoutUserInput
    disconnect?: PetProfileWhereInput | boolean
    delete?: PetProfileWhereInput | boolean
    connect?: PetProfileWhereUniqueInput
    update?: XOR<XOR<PetProfileUpdateToOneWithWhereWithoutUserInput, PetProfileUpdateWithoutUserInput>, PetProfileUncheckedUpdateWithoutUserInput>
  }

  export type LocationInfoUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<LocationInfoCreateWithoutUserInput, LocationInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: LocationInfoCreateOrConnectWithoutUserInput
    upsert?: LocationInfoUpsertWithoutUserInput
    disconnect?: LocationInfoWhereInput | boolean
    delete?: LocationInfoWhereInput | boolean
    connect?: LocationInfoWhereUniqueInput
    update?: XOR<XOR<LocationInfoUpdateToOneWithWhereWithoutUserInput, LocationInfoUpdateWithoutUserInput>, LocationInfoUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutPetprofileInput = {
    create?: XOR<UserCreateWithoutPetprofileInput, UserUncheckedCreateWithoutPetprofileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPetprofileInput
    connect?: UserWhereUniqueInput
  }

  export type PetPhotoCreateNestedManyWithoutPetProfileInput = {
    create?: XOR<PetPhotoCreateWithoutPetProfileInput, PetPhotoUncheckedCreateWithoutPetProfileInput> | PetPhotoCreateWithoutPetProfileInput[] | PetPhotoUncheckedCreateWithoutPetProfileInput[]
    connectOrCreate?: PetPhotoCreateOrConnectWithoutPetProfileInput | PetPhotoCreateOrConnectWithoutPetProfileInput[]
    createMany?: PetPhotoCreateManyPetProfileInputEnvelope
    connect?: PetPhotoWhereUniqueInput | PetPhotoWhereUniqueInput[]
  }

  export type PetPhotoUncheckedCreateNestedManyWithoutPetProfileInput = {
    create?: XOR<PetPhotoCreateWithoutPetProfileInput, PetPhotoUncheckedCreateWithoutPetProfileInput> | PetPhotoCreateWithoutPetProfileInput[] | PetPhotoUncheckedCreateWithoutPetProfileInput[]
    connectOrCreate?: PetPhotoCreateOrConnectWithoutPetProfileInput | PetPhotoCreateOrConnectWithoutPetProfileInput[]
    createMany?: PetPhotoCreateManyPetProfileInputEnvelope
    connect?: PetPhotoWhereUniqueInput | PetPhotoWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPetprofileNestedInput = {
    create?: XOR<UserCreateWithoutPetprofileInput, UserUncheckedCreateWithoutPetprofileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPetprofileInput
    upsert?: UserUpsertWithoutPetprofileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPetprofileInput, UserUpdateWithoutPetprofileInput>, UserUncheckedUpdateWithoutPetprofileInput>
  }

  export type PetPhotoUpdateManyWithoutPetProfileNestedInput = {
    create?: XOR<PetPhotoCreateWithoutPetProfileInput, PetPhotoUncheckedCreateWithoutPetProfileInput> | PetPhotoCreateWithoutPetProfileInput[] | PetPhotoUncheckedCreateWithoutPetProfileInput[]
    connectOrCreate?: PetPhotoCreateOrConnectWithoutPetProfileInput | PetPhotoCreateOrConnectWithoutPetProfileInput[]
    upsert?: PetPhotoUpsertWithWhereUniqueWithoutPetProfileInput | PetPhotoUpsertWithWhereUniqueWithoutPetProfileInput[]
    createMany?: PetPhotoCreateManyPetProfileInputEnvelope
    set?: PetPhotoWhereUniqueInput | PetPhotoWhereUniqueInput[]
    disconnect?: PetPhotoWhereUniqueInput | PetPhotoWhereUniqueInput[]
    delete?: PetPhotoWhereUniqueInput | PetPhotoWhereUniqueInput[]
    connect?: PetPhotoWhereUniqueInput | PetPhotoWhereUniqueInput[]
    update?: PetPhotoUpdateWithWhereUniqueWithoutPetProfileInput | PetPhotoUpdateWithWhereUniqueWithoutPetProfileInput[]
    updateMany?: PetPhotoUpdateManyWithWhereWithoutPetProfileInput | PetPhotoUpdateManyWithWhereWithoutPetProfileInput[]
    deleteMany?: PetPhotoScalarWhereInput | PetPhotoScalarWhereInput[]
  }

  export type PetPhotoUncheckedUpdateManyWithoutPetProfileNestedInput = {
    create?: XOR<PetPhotoCreateWithoutPetProfileInput, PetPhotoUncheckedCreateWithoutPetProfileInput> | PetPhotoCreateWithoutPetProfileInput[] | PetPhotoUncheckedCreateWithoutPetProfileInput[]
    connectOrCreate?: PetPhotoCreateOrConnectWithoutPetProfileInput | PetPhotoCreateOrConnectWithoutPetProfileInput[]
    upsert?: PetPhotoUpsertWithWhereUniqueWithoutPetProfileInput | PetPhotoUpsertWithWhereUniqueWithoutPetProfileInput[]
    createMany?: PetPhotoCreateManyPetProfileInputEnvelope
    set?: PetPhotoWhereUniqueInput | PetPhotoWhereUniqueInput[]
    disconnect?: PetPhotoWhereUniqueInput | PetPhotoWhereUniqueInput[]
    delete?: PetPhotoWhereUniqueInput | PetPhotoWhereUniqueInput[]
    connect?: PetPhotoWhereUniqueInput | PetPhotoWhereUniqueInput[]
    update?: PetPhotoUpdateWithWhereUniqueWithoutPetProfileInput | PetPhotoUpdateWithWhereUniqueWithoutPetProfileInput[]
    updateMany?: PetPhotoUpdateManyWithWhereWithoutPetProfileInput | PetPhotoUpdateManyWithWhereWithoutPetProfileInput[]
    deleteMany?: PetPhotoScalarWhereInput | PetPhotoScalarWhereInput[]
  }

  export type PetProfileCreateNestedOneWithoutPetPhotosInput = {
    create?: XOR<PetProfileCreateWithoutPetPhotosInput, PetProfileUncheckedCreateWithoutPetPhotosInput>
    connectOrCreate?: PetProfileCreateOrConnectWithoutPetPhotosInput
    connect?: PetProfileWhereUniqueInput
  }

  export type PetProfileUpdateOneRequiredWithoutPetPhotosNestedInput = {
    create?: XOR<PetProfileCreateWithoutPetPhotosInput, PetProfileUncheckedCreateWithoutPetPhotosInput>
    connectOrCreate?: PetProfileCreateOrConnectWithoutPetPhotosInput
    upsert?: PetProfileUpsertWithoutPetPhotosInput
    connect?: PetProfileWhereUniqueInput
    update?: XOR<XOR<PetProfileUpdateToOneWithWhereWithoutPetPhotosInput, PetProfileUpdateWithoutPetPhotosInput>, PetProfileUncheckedUpdateWithoutPetPhotosInput>
  }

  export type MessagesCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<MessagesCreateWithoutChatRoomInput, MessagesUncheckedCreateWithoutChatRoomInput> | MessagesCreateWithoutChatRoomInput[] | MessagesUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: MessagesCreateOrConnectWithoutChatRoomInput | MessagesCreateOrConnectWithoutChatRoomInput[]
    createMany?: MessagesCreateManyChatRoomInputEnvelope
    connect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
  }

  export type MessagesUncheckedCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<MessagesCreateWithoutChatRoomInput, MessagesUncheckedCreateWithoutChatRoomInput> | MessagesCreateWithoutChatRoomInput[] | MessagesUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: MessagesCreateOrConnectWithoutChatRoomInput | MessagesCreateOrConnectWithoutChatRoomInput[]
    createMany?: MessagesCreateManyChatRoomInputEnvelope
    connect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
  }

  export type MessagesUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<MessagesCreateWithoutChatRoomInput, MessagesUncheckedCreateWithoutChatRoomInput> | MessagesCreateWithoutChatRoomInput[] | MessagesUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: MessagesCreateOrConnectWithoutChatRoomInput | MessagesCreateOrConnectWithoutChatRoomInput[]
    upsert?: MessagesUpsertWithWhereUniqueWithoutChatRoomInput | MessagesUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: MessagesCreateManyChatRoomInputEnvelope
    set?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    disconnect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    delete?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    connect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    update?: MessagesUpdateWithWhereUniqueWithoutChatRoomInput | MessagesUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: MessagesUpdateManyWithWhereWithoutChatRoomInput | MessagesUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: MessagesScalarWhereInput | MessagesScalarWhereInput[]
  }

  export type MessagesUncheckedUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<MessagesCreateWithoutChatRoomInput, MessagesUncheckedCreateWithoutChatRoomInput> | MessagesCreateWithoutChatRoomInput[] | MessagesUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: MessagesCreateOrConnectWithoutChatRoomInput | MessagesCreateOrConnectWithoutChatRoomInput[]
    upsert?: MessagesUpsertWithWhereUniqueWithoutChatRoomInput | MessagesUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: MessagesCreateManyChatRoomInputEnvelope
    set?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    disconnect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    delete?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    connect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    update?: MessagesUpdateWithWhereUniqueWithoutChatRoomInput | MessagesUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: MessagesUpdateManyWithWhereWithoutChatRoomInput | MessagesUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: MessagesScalarWhereInput | MessagesScalarWhereInput[]
  }

  export type ChatRoomCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutMessagesInput
    connect?: ChatRoomWhereUniqueInput
  }

  export type ChatRoomUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutMessagesInput
    upsert?: ChatRoomUpsertWithoutMessagesInput
    connect?: ChatRoomWhereUniqueInput
    update?: XOR<XOR<ChatRoomUpdateToOneWithWhereWithoutMessagesInput, ChatRoomUpdateWithoutMessagesInput>, ChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type UserCreateNestedOneWithoutLocationinfoInput = {
    create?: XOR<UserCreateWithoutLocationinfoInput, UserUncheckedCreateWithoutLocationinfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutLocationinfoInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLocationinfoNestedInput = {
    create?: XOR<UserCreateWithoutLocationinfoInput, UserUncheckedCreateWithoutLocationinfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutLocationinfoInput
    upsert?: UserUpsertWithoutLocationinfoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLocationinfoInput, UserUpdateWithoutLocationinfoInput>, UserUncheckedUpdateWithoutLocationinfoInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type PetProfileCreateWithoutUserInput = {
    petName: string
    species: string
    breed: string
    age: number
    vaxxed: string
    sprayedNeutered: string
    bio: string
    profileImage: string
    location: string
    petPhotos?: PetPhotoCreateNestedManyWithoutPetProfileInput
  }

  export type PetProfileUncheckedCreateWithoutUserInput = {
    petId?: number
    petName: string
    species: string
    breed: string
    age: number
    vaxxed: string
    sprayedNeutered: string
    bio: string
    profileImage: string
    location: string
    petPhotos?: PetPhotoUncheckedCreateNestedManyWithoutPetProfileInput
  }

  export type PetProfileCreateOrConnectWithoutUserInput = {
    where: PetProfileWhereUniqueInput
    create: XOR<PetProfileCreateWithoutUserInput, PetProfileUncheckedCreateWithoutUserInput>
  }

  export type LocationInfoCreateWithoutUserInput = {
    cityName: string
    state: string
    country: string
  }

  export type LocationInfoUncheckedCreateWithoutUserInput = {
    locationId?: number
    cityName: string
    state: string
    country: string
  }

  export type LocationInfoCreateOrConnectWithoutUserInput = {
    where: LocationInfoWhereUniqueInput
    create: XOR<LocationInfoCreateWithoutUserInput, LocationInfoUncheckedCreateWithoutUserInput>
  }

  export type PetProfileUpsertWithoutUserInput = {
    update: XOR<PetProfileUpdateWithoutUserInput, PetProfileUncheckedUpdateWithoutUserInput>
    create: XOR<PetProfileCreateWithoutUserInput, PetProfileUncheckedCreateWithoutUserInput>
    where?: PetProfileWhereInput
  }

  export type PetProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: PetProfileWhereInput
    data: XOR<PetProfileUpdateWithoutUserInput, PetProfileUncheckedUpdateWithoutUserInput>
  }

  export type PetProfileUpdateWithoutUserInput = {
    petName?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    vaxxed?: StringFieldUpdateOperationsInput | string
    sprayedNeutered?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    petPhotos?: PetPhotoUpdateManyWithoutPetProfileNestedInput
  }

  export type PetProfileUncheckedUpdateWithoutUserInput = {
    petId?: IntFieldUpdateOperationsInput | number
    petName?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    vaxxed?: StringFieldUpdateOperationsInput | string
    sprayedNeutered?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    petPhotos?: PetPhotoUncheckedUpdateManyWithoutPetProfileNestedInput
  }

  export type LocationInfoUpsertWithoutUserInput = {
    update: XOR<LocationInfoUpdateWithoutUserInput, LocationInfoUncheckedUpdateWithoutUserInput>
    create: XOR<LocationInfoCreateWithoutUserInput, LocationInfoUncheckedCreateWithoutUserInput>
    where?: LocationInfoWhereInput
  }

  export type LocationInfoUpdateToOneWithWhereWithoutUserInput = {
    where?: LocationInfoWhereInput
    data: XOR<LocationInfoUpdateWithoutUserInput, LocationInfoUncheckedUpdateWithoutUserInput>
  }

  export type LocationInfoUpdateWithoutUserInput = {
    cityName?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type LocationInfoUncheckedUpdateWithoutUserInput = {
    locationId?: IntFieldUpdateOperationsInput | number
    cityName?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutPetprofileInput = {
    name: string
    username: string
    email: string
    password: string
    userImage: string
    locationinfo?: LocationInfoCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPetprofileInput = {
    id?: number
    name: string
    username: string
    email: string
    password: string
    userImage: string
    locationinfo?: LocationInfoUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPetprofileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPetprofileInput, UserUncheckedCreateWithoutPetprofileInput>
  }

  export type PetPhotoCreateWithoutPetProfileInput = {
    imageUrl: string
    location: string
  }

  export type PetPhotoUncheckedCreateWithoutPetProfileInput = {
    photoId?: number
    imageUrl: string
    location: string
  }

  export type PetPhotoCreateOrConnectWithoutPetProfileInput = {
    where: PetPhotoWhereUniqueInput
    create: XOR<PetPhotoCreateWithoutPetProfileInput, PetPhotoUncheckedCreateWithoutPetProfileInput>
  }

  export type PetPhotoCreateManyPetProfileInputEnvelope = {
    data: PetPhotoCreateManyPetProfileInput | PetPhotoCreateManyPetProfileInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPetprofileInput = {
    update: XOR<UserUpdateWithoutPetprofileInput, UserUncheckedUpdateWithoutPetprofileInput>
    create: XOR<UserCreateWithoutPetprofileInput, UserUncheckedCreateWithoutPetprofileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPetprofileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPetprofileInput, UserUncheckedUpdateWithoutPetprofileInput>
  }

  export type UserUpdateWithoutPetprofileInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userImage?: StringFieldUpdateOperationsInput | string
    locationinfo?: LocationInfoUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPetprofileInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userImage?: StringFieldUpdateOperationsInput | string
    locationinfo?: LocationInfoUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PetPhotoUpsertWithWhereUniqueWithoutPetProfileInput = {
    where: PetPhotoWhereUniqueInput
    update: XOR<PetPhotoUpdateWithoutPetProfileInput, PetPhotoUncheckedUpdateWithoutPetProfileInput>
    create: XOR<PetPhotoCreateWithoutPetProfileInput, PetPhotoUncheckedCreateWithoutPetProfileInput>
  }

  export type PetPhotoUpdateWithWhereUniqueWithoutPetProfileInput = {
    where: PetPhotoWhereUniqueInput
    data: XOR<PetPhotoUpdateWithoutPetProfileInput, PetPhotoUncheckedUpdateWithoutPetProfileInput>
  }

  export type PetPhotoUpdateManyWithWhereWithoutPetProfileInput = {
    where: PetPhotoScalarWhereInput
    data: XOR<PetPhotoUpdateManyMutationInput, PetPhotoUncheckedUpdateManyWithoutPetProfileInput>
  }

  export type PetPhotoScalarWhereInput = {
    AND?: PetPhotoScalarWhereInput | PetPhotoScalarWhereInput[]
    OR?: PetPhotoScalarWhereInput[]
    NOT?: PetPhotoScalarWhereInput | PetPhotoScalarWhereInput[]
    photoId?: IntFilter<"PetPhoto"> | number
    imageUrl?: StringFilter<"PetPhoto"> | string
    petProfileId?: IntFilter<"PetPhoto"> | number
    location?: StringFilter<"PetPhoto"> | string
  }

  export type PetProfileCreateWithoutPetPhotosInput = {
    petName: string
    species: string
    breed: string
    age: number
    vaxxed: string
    sprayedNeutered: string
    bio: string
    profileImage: string
    location: string
    user: UserCreateNestedOneWithoutPetprofileInput
  }

  export type PetProfileUncheckedCreateWithoutPetPhotosInput = {
    petId?: number
    petName: string
    species: string
    breed: string
    age: number
    vaxxed: string
    sprayedNeutered: string
    bio: string
    profileImage: string
    location: string
    userId: number
  }

  export type PetProfileCreateOrConnectWithoutPetPhotosInput = {
    where: PetProfileWhereUniqueInput
    create: XOR<PetProfileCreateWithoutPetPhotosInput, PetProfileUncheckedCreateWithoutPetPhotosInput>
  }

  export type PetProfileUpsertWithoutPetPhotosInput = {
    update: XOR<PetProfileUpdateWithoutPetPhotosInput, PetProfileUncheckedUpdateWithoutPetPhotosInput>
    create: XOR<PetProfileCreateWithoutPetPhotosInput, PetProfileUncheckedCreateWithoutPetPhotosInput>
    where?: PetProfileWhereInput
  }

  export type PetProfileUpdateToOneWithWhereWithoutPetPhotosInput = {
    where?: PetProfileWhereInput
    data: XOR<PetProfileUpdateWithoutPetPhotosInput, PetProfileUncheckedUpdateWithoutPetPhotosInput>
  }

  export type PetProfileUpdateWithoutPetPhotosInput = {
    petName?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    vaxxed?: StringFieldUpdateOperationsInput | string
    sprayedNeutered?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPetprofileNestedInput
  }

  export type PetProfileUncheckedUpdateWithoutPetPhotosInput = {
    petId?: IntFieldUpdateOperationsInput | number
    petName?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    vaxxed?: StringFieldUpdateOperationsInput | string
    sprayedNeutered?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MessagesCreateWithoutChatRoomInput = {
    sender: string
    content: string
  }

  export type MessagesUncheckedCreateWithoutChatRoomInput = {
    messageId?: number
    sender: string
    content: string
  }

  export type MessagesCreateOrConnectWithoutChatRoomInput = {
    where: MessagesWhereUniqueInput
    create: XOR<MessagesCreateWithoutChatRoomInput, MessagesUncheckedCreateWithoutChatRoomInput>
  }

  export type MessagesCreateManyChatRoomInputEnvelope = {
    data: MessagesCreateManyChatRoomInput | MessagesCreateManyChatRoomInput[]
    skipDuplicates?: boolean
  }

  export type MessagesUpsertWithWhereUniqueWithoutChatRoomInput = {
    where: MessagesWhereUniqueInput
    update: XOR<MessagesUpdateWithoutChatRoomInput, MessagesUncheckedUpdateWithoutChatRoomInput>
    create: XOR<MessagesCreateWithoutChatRoomInput, MessagesUncheckedCreateWithoutChatRoomInput>
  }

  export type MessagesUpdateWithWhereUniqueWithoutChatRoomInput = {
    where: MessagesWhereUniqueInput
    data: XOR<MessagesUpdateWithoutChatRoomInput, MessagesUncheckedUpdateWithoutChatRoomInput>
  }

  export type MessagesUpdateManyWithWhereWithoutChatRoomInput = {
    where: MessagesScalarWhereInput
    data: XOR<MessagesUpdateManyMutationInput, MessagesUncheckedUpdateManyWithoutChatRoomInput>
  }

  export type MessagesScalarWhereInput = {
    AND?: MessagesScalarWhereInput | MessagesScalarWhereInput[]
    OR?: MessagesScalarWhereInput[]
    NOT?: MessagesScalarWhereInput | MessagesScalarWhereInput[]
    messageId?: IntFilter<"Messages"> | number
    messageRoomId?: IntFilter<"Messages"> | number
    sender?: StringFilter<"Messages"> | string
    content?: StringFilter<"Messages"> | string
  }

  export type ChatRoomCreateWithoutMessagesInput = {
    userone: string
    useroneId: number
    usertwo: string
    usertwoId: number
  }

  export type ChatRoomUncheckedCreateWithoutMessagesInput = {
    chatRoomId?: number
    userone: string
    useroneId: number
    usertwo: string
    usertwoId: number
  }

  export type ChatRoomCreateOrConnectWithoutMessagesInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
  }

  export type ChatRoomUpsertWithoutMessagesInput = {
    update: XOR<ChatRoomUpdateWithoutMessagesInput, ChatRoomUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    where?: ChatRoomWhereInput
  }

  export type ChatRoomUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatRoomWhereInput
    data: XOR<ChatRoomUpdateWithoutMessagesInput, ChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatRoomUpdateWithoutMessagesInput = {
    userone?: StringFieldUpdateOperationsInput | string
    useroneId?: IntFieldUpdateOperationsInput | number
    usertwo?: StringFieldUpdateOperationsInput | string
    usertwoId?: IntFieldUpdateOperationsInput | number
  }

  export type ChatRoomUncheckedUpdateWithoutMessagesInput = {
    chatRoomId?: IntFieldUpdateOperationsInput | number
    userone?: StringFieldUpdateOperationsInput | string
    useroneId?: IntFieldUpdateOperationsInput | number
    usertwo?: StringFieldUpdateOperationsInput | string
    usertwoId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutLocationinfoInput = {
    name: string
    username: string
    email: string
    password: string
    userImage: string
    petprofile?: PetProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLocationinfoInput = {
    id?: number
    name: string
    username: string
    email: string
    password: string
    userImage: string
    petprofile?: PetProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLocationinfoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLocationinfoInput, UserUncheckedCreateWithoutLocationinfoInput>
  }

  export type UserUpsertWithoutLocationinfoInput = {
    update: XOR<UserUpdateWithoutLocationinfoInput, UserUncheckedUpdateWithoutLocationinfoInput>
    create: XOR<UserCreateWithoutLocationinfoInput, UserUncheckedCreateWithoutLocationinfoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLocationinfoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLocationinfoInput, UserUncheckedUpdateWithoutLocationinfoInput>
  }

  export type UserUpdateWithoutLocationinfoInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userImage?: StringFieldUpdateOperationsInput | string
    petprofile?: PetProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLocationinfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userImage?: StringFieldUpdateOperationsInput | string
    petprofile?: PetProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PetPhotoCreateManyPetProfileInput = {
    photoId?: number
    imageUrl: string
    location: string
  }

  export type PetPhotoUpdateWithoutPetProfileInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type PetPhotoUncheckedUpdateWithoutPetProfileInput = {
    photoId?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type PetPhotoUncheckedUpdateManyWithoutPetProfileInput = {
    photoId?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type MessagesCreateManyChatRoomInput = {
    messageId?: number
    sender: string
    content: string
  }

  export type MessagesUpdateWithoutChatRoomInput = {
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MessagesUncheckedUpdateWithoutChatRoomInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MessagesUncheckedUpdateManyWithoutChatRoomInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PetProfileCountOutputTypeDefaultArgs instead
     */
    export type PetProfileCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PetProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatRoomCountOutputTypeDefaultArgs instead
     */
    export type ChatRoomCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PetProfileDefaultArgs instead
     */
    export type PetProfileArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PetProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PetPhotoDefaultArgs instead
     */
    export type PetPhotoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PetPhotoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatRoomDefaultArgs instead
     */
    export type ChatRoomArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ChatRoomDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessagesDefaultArgs instead
     */
    export type MessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MessagesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationInfoDefaultArgs instead
     */
    export type LocationInfoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = LocationInfoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}